diff --git a/node_modules/react-instantsearch-hooks-server/dist/es/getServerState.js b/node_modules/react-instantsearch-hooks-server/dist/es/getServerState.js
index 7391cae..2f42f58 100644
--- a/node_modules/react-instantsearch-hooks-server/dist/es/getServerState.js
+++ b/node_modules/react-instantsearch-hooks-server/dist/es/getServerState.js
@@ -1,5 +1,4 @@
 import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
-import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
 
 function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }
 
@@ -8,75 +7,55 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 import { isIndexWidget } from 'instantsearch.js/es/widgets/index/index.js';
 import React from 'react'; // eslint-disable-next-line import/extensions
 
-import ReactDOM from 'react-dom/server';
+import ReactDOM from 'react-dom/server.js';
 import { InstantSearchServerContext } from 'react-instantsearch-hooks';
 
 /**
  * Returns the InstantSearch server state from a component.
  */
-export function getServerState(_x) {
-  return _getServerState.apply(this, arguments);
+export function getServerState(children) {
+  var searchRef = {
+    current: undefined
+  };
+
+  var notifyServer = function notifyServer(_ref) {
+    var search = _ref.search;
+    searchRef.current = search;
+  };
+
+  ReactDOM.renderToString( /*#__PURE__*/React.createElement(InstantSearchServerContext.Provider, {
+    value: {
+      notifyServer: notifyServer
+    }
+  }, children)); // We wait for the component to mount so that `notifyServer()` is called.
+
+  return new Promise(function (resolve) {
+    return setTimeout(resolve, 0);
+  }).then(function () {
+    // If `notifyServer()` is not called by then, it means that <InstantSearch>
+    // wasn't within the `children`.
+    // We decide to go with a strict behavior in that case; throwing. If users have
+    // some routes that don't mount the <InstantSearch> component, they would need
+    // to try/catch the `getServerState()` call.
+    // If this behavior turns out to be too strict for many users, we can decide
+    // to warn instead of throwing.
+    if (!searchRef.current) {
+      throw new Error("Unable to retrieve InstantSearch's server state in `getServerState()`. Did you mount the <InstantSearch> component?");
+    }
+
+    return waitForResults(searchRef.current);
+  }).then(function () {
+    var initialResults = getInitialResults(searchRef.current.mainIndex);
+    return {
+      initialResults: initialResults
+    };
+  });
 }
 /**
  * Waits for the results from the search instance to coordinate the next steps
  * in `getServerState()`.
  */
 
-function _getServerState() {
-  _getServerState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(children) {
-    var searchRef, notifyServer, initialResults;
-    return regeneratorRuntime.wrap(function _callee$(_context) {
-      while (1) {
-        switch (_context.prev = _context.next) {
-          case 0:
-            searchRef = {
-              current: undefined
-            };
-
-            notifyServer = function notifyServer(_ref) {
-              var search = _ref.search;
-              searchRef.current = search;
-            };
-
-            ReactDOM.renderToString( /*#__PURE__*/React.createElement(InstantSearchServerContext.Provider, {
-              value: {
-                notifyServer: notifyServer
-              }
-            }, children)); // We wait for the component to mount so that `notifyServer()` is called.
-
-            _context.next = 5;
-            return new Promise(function (resolve) {
-              return setTimeout(resolve, 0);
-            });
-
-          case 5:
-            if (searchRef.current) {
-              _context.next = 7;
-              break;
-            }
-
-            throw new Error("Unable to retrieve InstantSearch's server state in `getServerState()`. Did you mount the <InstantSearch> component?");
-
-          case 7:
-            _context.next = 9;
-            return waitForResults(searchRef.current);
-
-          case 9:
-            initialResults = getInitialResults(searchRef.current.mainIndex);
-            return _context.abrupt("return", {
-              initialResults: initialResults
-            });
-
-          case 11:
-          case "end":
-            return _context.stop();
-        }
-      }
-    }, _callee);
-  }));
-  return _getServerState.apply(this, arguments);
-}
-
 function waitForResults(search) {
   var helper = search.mainHelper;
   helper.searchOnlyWithDerivedHelpers();
