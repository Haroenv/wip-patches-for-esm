diff --git a/node_modules/instantsearch.js/es/components/Answers/Answers.d.ts b/node_modules/instantsearch.js/es/components/Answers/Answers.d.ts
index 5aa314f..1792701 100644
--- a/node_modules/instantsearch.js/es/components/Answers/Answers.d.ts
+++ b/node_modules/instantsearch.js/es/components/Answers/Answers.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { AnswersCSSClasses, AnswersTemplates } from '../../widgets/answers/answers';
-import type { ComponentCSSClasses, Hits } from '../../types';
+import type { AnswersCSSClasses, AnswersTemplates } from '../../widgets/answers/answers.js';
+import type { ComponentCSSClasses, Hits } from '../../types/index.js';
 export declare type AnswersComponentCSSClasses = ComponentCSSClasses<AnswersCSSClasses>;
 export declare type AnswersComponentTemplates = Required<AnswersTemplates>;
 export declare type AnswersProps = {
diff --git a/node_modules/instantsearch.js/es/components/Answers/Answers.js b/node_modules/instantsearch.js/es/components/Answers/Answers.js
index 994e38e..1de6aa6 100644
--- a/node_modules/instantsearch.js/es/components/Answers/Answers.js
+++ b/node_modules/instantsearch.js/es/components/Answers/Answers.js
@@ -9,7 +9,7 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var Answers = function Answers(_ref) {
   var hits = _ref.hits,
diff --git a/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.d.ts b/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.d.ts
index 0b0382a..5b6e0b6 100644
--- a/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.d.ts
+++ b/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.d.ts
@@ -1,9 +1,9 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { BreadcrumbCSSClasses, BreadcrumbTemplates } from '../../widgets/breadcrumb/breadcrumb';
-import type { ComponentCSSClasses } from '../../types';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
-import type { BreadcrumbConnectorParamsItem } from '../../connectors/breadcrumb/connectBreadcrumb';
+import type { BreadcrumbCSSClasses, BreadcrumbTemplates } from '../../widgets/breadcrumb/breadcrumb.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
+import type { BreadcrumbConnectorParamsItem } from '../../connectors/breadcrumb/connectBreadcrumb.js';
 export declare type BreadcrumbComponentCSSClasses = ComponentCSSClasses<BreadcrumbCSSClasses>;
 export declare type BreadcrumbComponentTemplates = Required<BreadcrumbTemplates>;
 export declare type BreadcrumbProps = {
diff --git a/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.js b/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.js
index 2fa6422..8d9a71a 100644
--- a/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.js
+++ b/node_modules/instantsearch.js/es/components/Breadcrumb/Breadcrumb.js
@@ -5,7 +5,7 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var Breadcrumb = function Breadcrumb(_ref) {
   var items = _ref.items,
diff --git a/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.d.ts b/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.d.ts
index e00e993..58176db 100644
--- a/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.d.ts
+++ b/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.d.ts
@@ -1,9 +1,9 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { ClearRefinementsRenderState } from '../../connectors/clear-refinements/connectClearRefinements';
-import type { ClearRefinementsCSSClasses, ClearRefinementsTemplates } from '../../widgets/clear-refinements/clear-refinements';
-import type { ComponentCSSClasses } from '../../types';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
+import type { ClearRefinementsRenderState } from '../../connectors/clear-refinements/connectClearRefinements.js';
+import type { ClearRefinementsCSSClasses, ClearRefinementsTemplates } from '../../widgets/clear-refinements/clear-refinements.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
 export declare type ClearRefinementsComponentCSSClasses = ComponentCSSClasses<ClearRefinementsCSSClasses>;
 export declare type ClearRefinementsComponentTemplates = Required<ClearRefinementsTemplates>;
 export declare type ClearRefinementsProps = {
diff --git a/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.js b/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.js
index d9d83ef..9ac71a2 100644
--- a/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.js
+++ b/node_modules/instantsearch.js/es/components/ClearRefinements/ClearRefinements.js
@@ -5,7 +5,7 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var ClearRefinements = function ClearRefinements(_ref) {
   var hasRefinements = _ref.hasRefinements,
diff --git a/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.d.ts b/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.d.ts
index e7bb9c7..415e9cf 100644
--- a/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.d.ts
+++ b/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { CurrentRefinementsConnectorParamsItem } from '../../connectors/current-refinements/connectCurrentRefinements';
-import type { CurrentRefinementsCSSClasses } from '../../widgets/current-refinements/current-refinements';
-import type { ComponentCSSClasses } from '../../types';
+import type { CurrentRefinementsConnectorParamsItem } from '../../connectors/current-refinements/connectCurrentRefinements.js';
+import type { CurrentRefinementsCSSClasses } from '../../widgets/current-refinements/current-refinements.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type CurrentRefinementsComponentCSSClasses = ComponentCSSClasses<CurrentRefinementsCSSClasses>;
 export declare type CurrentRefinementsProps = {
     items: CurrentRefinementsConnectorParamsItem[];
diff --git a/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.js b/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.js
index 740f217..3a4a74a 100644
--- a/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.js
+++ b/node_modules/instantsearch.js/es/components/CurrentRefinements/CurrentRefinements.js
@@ -1,6 +1,6 @@
 /** @jsx h */
 import { h } from 'preact';
-import { isSpecialClick, capitalize } from '../../lib/utils';
+import { isSpecialClick, capitalize } from '../../lib/utils/index.js';
 
 var createItemKey = function createItemKey(_ref) {
   var attribute = _ref.attribute,
diff --git a/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.d.ts b/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.d.ts
index e3f166b..b223cd2 100644
--- a/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.d.ts
+++ b/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { GeoSearchCSSClasses, GeoSearchTemplates } from '../../widgets/geo-search/geo-search';
-import type { ComponentCSSClasses } from '../../types';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
+import type { GeoSearchCSSClasses, GeoSearchTemplates } from '../../widgets/geo-search/geo-search.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
 declare type Props = {
     cssClasses: ComponentCSSClasses<GeoSearchCSSClasses>;
     enableRefine: boolean;
diff --git a/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.js b/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.js
index b6f4372..0c27f7d 100644
--- a/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.js
+++ b/node_modules/instantsearch.js/es/components/GeoSearchControls/GeoSearchControls.js
@@ -5,9 +5,9 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, Fragment } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
-import GeoSearchButton from './GeoSearchButton';
-import GeoSearchToggle from './GeoSearchToggle';
+import Template from '../Template/Template.js';
+import GeoSearchButton from './GeoSearchButton.js';
+import GeoSearchToggle from './GeoSearchToggle.js';
 
 var GeoSearchControls = function GeoSearchControls(_ref) {
   var cssClasses = _ref.cssClasses,
diff --git a/node_modules/instantsearch.js/es/components/Hits/Hits.d.ts b/node_modules/instantsearch.js/es/components/Hits/Hits.d.ts
index 973adba..87d33ca 100644
--- a/node_modules/instantsearch.js/es/components/Hits/Hits.d.ts
+++ b/node_modules/instantsearch.js/es/components/Hits/Hits.d.ts
@@ -1,10 +1,10 @@
 /** @jsx h */
 import { h } from 'preact';
 import type { SearchResults } from 'algoliasearch-helper';
-import type { BindEventForHits, SendEventForHits } from '../../lib/utils';
-import type { ComponentCSSClasses, Hits as HitsArray } from '../../types';
-import type { HitsCSSClasses, HitsTemplates } from '../../widgets/hits/hits';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
+import type { BindEventForHits, SendEventForHits } from '../../lib/utils/index.js';
+import type { ComponentCSSClasses, Hits as HitsArray } from '../../types/index.js';
+import type { HitsCSSClasses, HitsTemplates } from '../../widgets/hits/hits.js';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
 export declare type HitsComponentCSSClasses = ComponentCSSClasses<HitsCSSClasses>;
 export declare type HitsComponentTemplates = Required<HitsTemplates>;
 export declare type HitsProps = {
diff --git a/node_modules/instantsearch.js/es/components/Hits/Hits.js b/node_modules/instantsearch.js/es/components/Hits/Hits.js
index 54236f4..a2174ca 100644
--- a/node_modules/instantsearch.js/es/components/Hits/Hits.js
+++ b/node_modules/instantsearch.js/es/components/Hits/Hits.js
@@ -9,7 +9,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var Hits = function Hits(_ref) {
   var results = _ref.results,
diff --git a/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.d.ts b/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.d.ts
index 989069a..e82bd02 100644
--- a/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.d.ts
+++ b/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.d.ts
@@ -1,9 +1,9 @@
 /** @jsx h */
 import { h } from 'preact';
 import type { SearchResults } from 'algoliasearch-helper';
-import type { ComponentCSSClasses, Hits } from '../../types';
-import type { InfiniteHitsCSSClasses, InfiniteHitsTemplates } from '../../widgets/infinite-hits/infinite-hits';
-import type { SendEventForHits, BindEventForHits } from '../../lib/utils';
+import type { ComponentCSSClasses, Hits } from '../../types/index.js';
+import type { InfiniteHitsCSSClasses, InfiniteHitsTemplates } from '../../widgets/infinite-hits/infinite-hits.js';
+import type { SendEventForHits, BindEventForHits } from '../../lib/utils/index.js';
 export declare type InfiniteHitsComponentCSSClasses = ComponentCSSClasses<InfiniteHitsCSSClasses>;
 export declare type InfiniteHitsComponentTemplates = Required<InfiniteHitsTemplates>;
 export declare type InfiniteHitsProps = {
diff --git a/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.js b/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.js
index 8095a83..ca3919a 100644
--- a/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.js
+++ b/node_modules/instantsearch.js/es/components/InfiniteHits/InfiniteHits.js
@@ -9,7 +9,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var InfiniteHits = function InfiniteHits(_ref) {
   var results = _ref.results,
diff --git a/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.d.ts b/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.d.ts
index 4eb370a..1521c7f 100644
--- a/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.d.ts
+++ b/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { MenuSelectCSSClasses, MenuSelectTemplates } from '../../widgets/menu-select/menu-select';
-import type { MenuRenderState } from '../../connectors/menu/connectMenu';
-import type { ComponentCSSClasses } from '../../types';
+import type { MenuSelectCSSClasses, MenuSelectTemplates } from '../../widgets/menu-select/menu-select.js';
+import type { MenuRenderState } from '../../connectors/menu/connectMenu.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type MenuSelectComponentCSSClasses = ComponentCSSClasses<MenuSelectCSSClasses>;
 export declare type MenuSelectComponentTemplates = Required<MenuSelectTemplates>;
 declare type MenuItem = {
diff --git a/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.js b/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.js
index d576e9b..dfbbc50 100644
--- a/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.js
+++ b/node_modules/instantsearch.js/es/components/MenuSelect/MenuSelect.js
@@ -5,8 +5,8 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import { find } from '../../lib/utils';
-import Template from '../Template/Template';
+import { find } from '../../lib/utils/index.js';
+import Template from '../Template/Template.js';
 
 function MenuSelect(_ref) {
   var cssClasses = _ref.cssClasses,
diff --git a/node_modules/instantsearch.js/es/components/Pagination/Pagination.d.ts b/node_modules/instantsearch.js/es/components/Pagination/Pagination.d.ts
index 452858c..2f7ee53 100644
--- a/node_modules/instantsearch.js/es/components/Pagination/Pagination.d.ts
+++ b/node_modules/instantsearch.js/es/components/Pagination/Pagination.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { Component, h } from 'preact';
-import type { PaginationCSSClasses, PaginationTemplates } from '../../widgets/pagination/pagination';
-import type { ComponentCSSClasses } from '../../types';
+import type { PaginationCSSClasses, PaginationTemplates } from '../../widgets/pagination/pagination.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type PaginationComponentCSSClasses = ComponentCSSClasses<PaginationCSSClasses>;
 export declare type PaginationComponentTemplates = Required<PaginationTemplates>;
 export declare type PaginationProps = {
diff --git a/node_modules/instantsearch.js/es/components/Pagination/Pagination.js b/node_modules/instantsearch.js/es/components/Pagination/Pagination.js
index 903de63..9169040 100644
--- a/node_modules/instantsearch.js/es/components/Pagination/Pagination.js
+++ b/node_modules/instantsearch.js/es/components/Pagination/Pagination.js
@@ -25,8 +25,8 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { Component, h } from 'preact';
 import cx from 'classnames';
-import PaginationLink from './PaginationLink';
-import { isSpecialClick } from '../../lib/utils';
+import PaginationLink from './PaginationLink.js';
+import { isSpecialClick } from '../../lib/utils/index.js';
 var defaultProps = {
   currentPage: 0,
   nbPages: 0,
diff --git a/node_modules/instantsearch.js/es/components/Panel/Panel.d.ts b/node_modules/instantsearch.js/es/components/Panel/Panel.d.ts
index 89fb781..ded692d 100644
--- a/node_modules/instantsearch.js/es/components/Panel/Panel.d.ts
+++ b/node_modules/instantsearch.js/es/components/Panel/Panel.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { PanelCSSClasses, PanelSharedOptions, PanelTemplates } from '../../widgets/panel/panel';
-import type { ComponentCSSClasses, UnknownWidgetFactory } from '../../types';
+import type { PanelCSSClasses, PanelSharedOptions, PanelTemplates } from '../../widgets/panel/panel.js';
+import type { ComponentCSSClasses, UnknownWidgetFactory } from '../../types/index.js';
 export declare type PanelComponentCSSClasses = ComponentCSSClasses<Omit<PanelCSSClasses, 'collapseIcon'>>;
 export declare type PanelComponentTemplates<TWidget extends UnknownWidgetFactory> = Required<PanelTemplates<TWidget>>;
 export declare type PanelProps<TWidget extends UnknownWidgetFactory> = {
diff --git a/node_modules/instantsearch.js/es/components/Panel/Panel.js b/node_modules/instantsearch.js/es/components/Panel/Panel.js
index fb16c65..5e344c2 100644
--- a/node_modules/instantsearch.js/es/components/Panel/Panel.js
+++ b/node_modules/instantsearch.js/es/components/Panel/Panel.js
@@ -16,7 +16,7 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 import { h } from 'preact';
 import { useState, useEffect, useRef } from 'preact/hooks';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 function Panel(props) {
   var _cx;
diff --git a/node_modules/instantsearch.js/es/components/PoweredBy/PoweredBy.d.ts b/node_modules/instantsearch.js/es/components/PoweredBy/PoweredBy.d.ts
index 8560631..139e857 100644
--- a/node_modules/instantsearch.js/es/components/PoweredBy/PoweredBy.d.ts
+++ b/node_modules/instantsearch.js/es/components/PoweredBy/PoweredBy.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { ComponentCSSClasses } from '../../types';
-import type { PoweredByCSSClasses } from '../../widgets/powered-by/powered-by';
+import type { ComponentCSSClasses } from '../../types/index.js';
+import type { PoweredByCSSClasses } from '../../widgets/powered-by/powered-by.js';
 export declare type PoweredByComponentCSSClasses = ComponentCSSClasses<PoweredByCSSClasses>;
 export declare type PoweredByProps = {
     url: string;
diff --git a/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.d.ts b/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.d.ts
index 8265b71..6d15968 100644
--- a/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.d.ts
+++ b/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { ComponentCSSClasses } from '../../types';
-import type { QueryRuleCustomDataCSSClasses, QueryRuleCustomDataTemplates } from '../../widgets/query-rule-custom-data/query-rule-custom-data';
+import type { ComponentCSSClasses } from '../../types/index.js';
+import type { QueryRuleCustomDataCSSClasses, QueryRuleCustomDataTemplates } from '../../widgets/query-rule-custom-data/query-rule-custom-data.js';
 export declare type QueryRuleCustomDataComponentCSSClasses = ComponentCSSClasses<QueryRuleCustomDataCSSClasses>;
 export declare type QueryRuleCustomDataComponentTemplates = Required<QueryRuleCustomDataTemplates>;
 export declare type QueryRuleCustomDataProps = {
diff --git a/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.js b/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.js
index 650670c..10e4f83 100644
--- a/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.js
+++ b/node_modules/instantsearch.js/es/components/QueryRuleCustomData/QueryRuleCustomData.js
@@ -1,6 +1,6 @@
 /** @jsx h */
 import { h } from 'preact';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var QueryRuleCustomData = function QueryRuleCustomData(_ref) {
   var cssClasses = _ref.cssClasses,
diff --git a/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.d.ts b/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.d.ts
index dbcb5b4..6213f58 100644
--- a/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.d.ts
+++ b/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h, Component } from 'preact';
-import type { RangeInputCSSClasses, RangeInputTemplates } from '../../widgets/range-input/range-input';
-import type { Range, RangeBoundaries } from '../../connectors/range/connectRange';
-import type { ComponentCSSClasses } from '../../types';
+import type { RangeInputCSSClasses, RangeInputTemplates } from '../../widgets/range-input/range-input.js';
+import type { Range, RangeBoundaries } from '../../connectors/range/connectRange.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type RangeInputComponentCSSClasses = ComponentCSSClasses<RangeInputCSSClasses>;
 export declare type RangeInputComponentTemplates = Required<RangeInputTemplates>;
 export declare type RangeInputProps = {
diff --git a/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.js b/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.js
index 64c50bc..46209cd 100644
--- a/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.js
+++ b/node_modules/instantsearch.js/es/components/RangeInput/RangeInput.js
@@ -27,7 +27,7 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, Component } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var RangeInput = /*#__PURE__*/function (_Component) {
   _inherits(RangeInput, _Component);
diff --git a/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.d.ts b/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.d.ts
index b8ea97c..0d5091c 100644
--- a/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.d.ts
+++ b/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.d.ts
@@ -1,13 +1,13 @@
 /** @jsx h */
 import type { JSX } from 'preact';
 import { Component } from 'preact';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
-import type { SearchBoxComponentCSSClasses, SearchBoxComponentTemplates } from '../SearchBox/SearchBox';
-import type { HierarchicalMenuItem } from '../../connectors/hierarchical-menu/connectHierarchicalMenu';
-import type { ComponentCSSClasses, CreateURL, Templates } from '../../types';
-import type { RefinementListOwnCSSClasses } from '../../widgets/refinement-list/refinement-list';
-import type { RatingMenuComponentCSSClasses } from '../../widgets/rating-menu/rating-menu';
-import type { HierarchicalMenuComponentCSSClasses } from '../../widgets/hierarchical-menu/hierarchical-menu';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
+import type { SearchBoxComponentCSSClasses, SearchBoxComponentTemplates } from '../SearchBox/SearchBox.js';
+import type { HierarchicalMenuItem } from '../../connectors/hierarchical-menu/connectHierarchicalMenu.js';
+import type { ComponentCSSClasses, CreateURL, Templates } from '../../types/index.js';
+import type { RefinementListOwnCSSClasses } from '../../widgets/refinement-list/refinement-list.js';
+import type { RatingMenuComponentCSSClasses } from '../../widgets/rating-menu/rating-menu.js';
+import type { HierarchicalMenuComponentCSSClasses } from '../../widgets/hierarchical-menu/hierarchical-menu.js';
 declare type RefinementListOptionalClasses = 'noResults' | 'checkbox' | 'labelText' | 'showMore' | 'disabledShowMore' | 'searchBox' | 'count';
 declare type RefinementListWidgetCSSClasses = ComponentCSSClasses<RefinementListOwnCSSClasses>;
 declare type RefinementListRequiredCSSClasses = Omit<RefinementListWidgetCSSClasses, RefinementListOptionalClasses> & Partial<Pick<RefinementListWidgetCSSClasses, RefinementListOptionalClasses>>;
diff --git a/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.js b/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.js
index 314c007..3b6e4cf 100644
--- a/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.js
+++ b/node_modules/instantsearch.js/es/components/RefinementList/RefinementList.js
@@ -35,10 +35,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, createRef, Component } from 'preact';
 import cx from 'classnames';
-import { isSpecialClick, isEqual } from '../../lib/utils';
-import Template from '../Template/Template';
-import RefinementListItem from './RefinementListItem';
-import SearchBox from '../SearchBox/SearchBox';
+import { isSpecialClick, isEqual } from '../../lib/utils/index.js';
+import Template from '../Template/Template.js';
+import RefinementListItem from './RefinementListItem.js';
+import SearchBox from '../SearchBox/SearchBox.js';
 var defaultProps = {
   cssClasses: {},
   depth: 0
diff --git a/node_modules/instantsearch.js/es/components/RefinementList/RefinementListItem.js b/node_modules/instantsearch.js/es/components/RefinementList/RefinementListItem.js
index 860965d..3550207 100644
--- a/node_modules/instantsearch.js/es/components/RefinementList/RefinementListItem.js
+++ b/node_modules/instantsearch.js/es/components/RefinementList/RefinementListItem.js
@@ -2,7 +2,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
 
 /** @jsx h */
 import { h } from 'preact';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 function RefinementListItem(_ref) {
   var className = _ref.className,
diff --git a/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.d.ts b/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.d.ts
index 2e57ce8..b76ad3c 100644
--- a/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.d.ts
+++ b/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { RelevantSortCSSClasses, RelevantSortTemplates } from '../../widgets/relevant-sort/relevant-sort';
-import type { ComponentCSSClasses } from '../../types';
+import type { RelevantSortCSSClasses, RelevantSortTemplates } from '../../widgets/relevant-sort/relevant-sort.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type RelevantSortComponentCSSClasses = ComponentCSSClasses<RelevantSortCSSClasses>;
 export declare type RelevantSortComponentTemplates = Required<RelevantSortTemplates>;
 declare type RelevantSortProps = {
diff --git a/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.js b/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.js
index 13372ca..d6f57b2 100644
--- a/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.js
+++ b/node_modules/instantsearch.js/es/components/RelevantSort/RelevantSort.js
@@ -1,6 +1,6 @@
 /** @jsx h */
 import { h } from 'preact';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var RelevantSort = function RelevantSort(_ref) {
   var cssClasses = _ref.cssClasses,
diff --git a/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.d.ts b/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.d.ts
index ff606fe..c978a77 100644
--- a/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.d.ts
+++ b/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h, Component } from 'preact';
-import { noop } from '../../lib/utils';
-import type { SearchBoxCSSClasses, SearchBoxTemplates } from '../../widgets/search-box/search-box';
-import type { ComponentCSSClasses } from '../../types';
+import { noop } from '../../lib/utils/index.js';
+import type { SearchBoxCSSClasses, SearchBoxTemplates } from '../../widgets/search-box/search-box.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type SearchBoxComponentCSSClasses = ComponentCSSClasses<SearchBoxCSSClasses>;
 export declare type SearchBoxComponentTemplates = Required<SearchBoxTemplates>;
 declare type SearchBoxProps = {
diff --git a/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.js b/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.js
index 694cd86..b9192d1 100644
--- a/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.js
+++ b/node_modules/instantsearch.js/es/components/SearchBox/SearchBox.js
@@ -24,8 +24,8 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 
 /** @jsx h */
 import { h, createRef, Component } from 'preact';
-import { noop } from '../../lib/utils';
-import Template from '../Template/Template';
+import { noop } from '../../lib/utils/index.js';
+import Template from '../Template/Template.js';
 var defaultProps = {
   query: '',
   showSubmit: true,
diff --git a/node_modules/instantsearch.js/es/components/Slider/Pit.d.ts b/node_modules/instantsearch.js/es/components/Slider/Pit.d.ts
index 160067d..c5f770a 100644
--- a/node_modules/instantsearch.js/es/components/Slider/Pit.d.ts
+++ b/node_modules/instantsearch.js/es/components/Slider/Pit.d.ts
@@ -1,5 +1,5 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { PitProps } from './Rheostat';
+import type { PitProps } from './Rheostat.js';
 declare const Pit: ({ style, children }: PitProps) => h.JSX.Element;
 export default Pit;
diff --git a/node_modules/instantsearch.js/es/components/Slider/Slider.d.ts b/node_modules/instantsearch.js/es/components/Slider/Slider.d.ts
index 7eeef0a..3a5032e 100644
--- a/node_modules/instantsearch.js/es/components/Slider/Slider.d.ts
+++ b/node_modules/instantsearch.js/es/components/Slider/Slider.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h, Component } from 'preact';
-import type { RangeBoundaries } from '../../connectors/range/connectRange';
-import type { RangeSliderCssClasses, RangeSliderWidgetParams } from '../../widgets/range-slider/range-slider';
-import type { ComponentCSSClasses } from '../../types';
+import type { RangeBoundaries } from '../../connectors/range/connectRange.js';
+import type { RangeSliderCssClasses, RangeSliderWidgetParams } from '../../widgets/range-slider/range-slider.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type RangeSliderComponentCSSClasses = ComponentCSSClasses<RangeSliderCssClasses>;
 export declare type SliderProps = {
     refine(values: RangeBoundaries): void;
diff --git a/node_modules/instantsearch.js/es/components/Slider/Slider.js b/node_modules/instantsearch.js/es/components/Slider/Slider.js
index 700954d..3005366 100644
--- a/node_modules/instantsearch.js/es/components/Slider/Slider.js
+++ b/node_modules/instantsearch.js/es/components/Slider/Slider.js
@@ -38,10 +38,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 
 /** @jsx h */
 import { h, Component } from 'preact';
-import Rheostat from './Rheostat';
+import Rheostat from './Rheostat.js';
 import cx from 'classnames';
-import { range } from '../../lib/utils';
-import Pit from './Pit';
+import { range } from '../../lib/utils/index.js';
+import Pit from './Pit.js';
 
 var Slider = /*#__PURE__*/function (_Component) {
   _inherits(Slider, _Component);
diff --git a/node_modules/instantsearch.js/es/components/Stats/Stats.d.ts b/node_modules/instantsearch.js/es/components/Stats/Stats.d.ts
index bdb8232..b2f4d0c 100644
--- a/node_modules/instantsearch.js/es/components/Stats/Stats.d.ts
+++ b/node_modules/instantsearch.js/es/components/Stats/Stats.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { StatsCSSClasses, StatsTemplates } from '../../widgets/stats/stats';
-import type { ComponentCSSClasses } from '../../types';
+import type { StatsCSSClasses, StatsTemplates } from '../../widgets/stats/stats.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type StatsComponentCSSClasses = ComponentCSSClasses<StatsCSSClasses>;
 export declare type StatsComponentTemplates = Required<StatsTemplates>;
 declare type StatsProps = {
diff --git a/node_modules/instantsearch.js/es/components/Stats/Stats.js b/node_modules/instantsearch.js/es/components/Stats/Stats.js
index 8440124..12a2715 100644
--- a/node_modules/instantsearch.js/es/components/Stats/Stats.js
+++ b/node_modules/instantsearch.js/es/components/Stats/Stats.js
@@ -13,7 +13,7 @@ function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) r
 /** @jsx h */
 import { h } from 'preact';
 import cx from 'classnames';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var Stats = function Stats(_ref) {
   var nbHits = _ref.nbHits,
diff --git a/node_modules/instantsearch.js/es/components/Template/Template.d.ts b/node_modules/instantsearch.js/es/components/Template/Template.d.ts
index e29cff8..ada89ed 100644
--- a/node_modules/instantsearch.js/es/components/Template/Template.d.ts
+++ b/node_modules/instantsearch.js/es/components/Template/Template.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import type { JSX } from 'preact';
 import { Component } from 'preact';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
-import type { Templates } from '../../types';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
+import type { Templates } from '../../types/index.js';
 declare const defaultProps: {
     data: {};
     rootTagName: string;
diff --git a/node_modules/instantsearch.js/es/components/Template/Template.js b/node_modules/instantsearch.js/es/components/Template/Template.js
index 227ac2b..0b39957 100644
--- a/node_modules/instantsearch.js/es/components/Template/Template.js
+++ b/node_modules/instantsearch.js/es/components/Template/Template.js
@@ -26,7 +26,7 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 
 /** @jsx h */
 import { h, Component } from 'preact';
-import { renderTemplate, isEqual } from '../../lib/utils';
+import { renderTemplate, isEqual } from '../../lib/utils/index.js';
 var defaultProps = {
   data: {},
   rootTagName: 'div',
diff --git a/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.d.ts b/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.d.ts
index b477575..f76678d 100644
--- a/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.d.ts
+++ b/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.d.ts
@@ -1,9 +1,9 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { ToggleRefinementRenderState, ToggleRefinementValue } from '../../connectors/toggle-refinement/connectToggleRefinement';
-import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps';
-import type { ComponentCSSClasses } from '../../types';
-import type { ToggleRefinementTemplates, ToggleRefinementCSSClasses } from '../../widgets/toggle-refinement/toggle-refinement';
+import type { ToggleRefinementRenderState, ToggleRefinementValue } from '../../connectors/toggle-refinement/connectToggleRefinement.js';
+import type { PreparedTemplateProps } from '../../lib/utils/prepareTemplateProps.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
+import type { ToggleRefinementTemplates, ToggleRefinementCSSClasses } from '../../widgets/toggle-refinement/toggle-refinement.js';
 export declare type ToggleRefinementComponentCSSClasses = ComponentCSSClasses<ToggleRefinementCSSClasses>;
 export declare type ToggleRefinementComponentTemplates = Required<ToggleRefinementTemplates>;
 export declare type ToggleRefinementProps = {
diff --git a/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.js b/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.js
index 9708447..4000e29 100644
--- a/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.js
+++ b/node_modules/instantsearch.js/es/components/ToggleRefinement/ToggleRefinement.js
@@ -2,7 +2,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
 
 /** @jsx h */
 import { h } from 'preact';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var ToggleRefinement = function ToggleRefinement(_ref) {
   var currentRefinement = _ref.currentRefinement,
diff --git a/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.d.ts b/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.d.ts
index 8cff9f6..b6ffce8 100644
--- a/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.d.ts
+++ b/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { VoiceSearchCSSClasses, VoiceSearchTemplates } from '../../widgets/voice-search/voice-search';
-import type { VoiceListeningState } from '../../lib/voiceSearchHelper/types';
-import type { ComponentCSSClasses } from '../../types';
+import type { VoiceSearchCSSClasses, VoiceSearchTemplates } from '../../widgets/voice-search/voice-search.js';
+import type { VoiceListeningState } from '../../lib/voiceSearchHelper/types/index.js';
+import type { ComponentCSSClasses } from '../../types/index.js';
 export declare type VoiceSearchComponentCSSClasses = ComponentCSSClasses<VoiceSearchCSSClasses>;
 export declare type VoiceSearchComponentTemplates = Required<VoiceSearchTemplates>;
 export declare type VoiceSearchProps = {
diff --git a/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.js b/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.js
index 19f9aa4..5f54150 100644
--- a/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.js
+++ b/node_modules/instantsearch.js/es/components/VoiceSearch/VoiceSearch.js
@@ -1,6 +1,6 @@
 /** @jsx h */
 import { h } from 'preact';
-import Template from '../Template/Template';
+import Template from '../Template/Template.js';
 
 var VoiceSearch = function VoiceSearch(_ref) {
   var cssClasses = _ref.cssClasses,
diff --git a/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.d.ts b/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.d.ts
index 4fe2309..d6abd4b 100644
--- a/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, Hits, FindAnswersOptions, WidgetRenderState } from '../../types';
+import type { Connector, Hits, FindAnswersOptions, WidgetRenderState } from '../../types/index.js';
 export declare type AnswersRenderState = {
     /**
      * The matched hits from Algolia API.
diff --git a/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.js b/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.js
index 24ff61f..e39ef1a 100644
--- a/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.js
+++ b/node_modules/instantsearch.js/es/connectors/answers/connectAnswers.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, createConcurrentSafePromise, addQueryID, debounce, addAbsolutePosition, noop, escapeHits } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, createConcurrentSafePromise, addQueryID, debounce, addAbsolutePosition, noop, escapeHits } from '../../lib/utils/index.js';
 
 function hasFindAnswersMethod(answersIndex) {
   return typeof answersIndex.findAnswers === 'function';
diff --git a/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.d.ts b/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.d.ts
index e08add1..4c18dae 100644
--- a/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.d.ts
@@ -1,6 +1,6 @@
 import type { SearchResults } from 'algoliasearch-helper';
-import type { SendEventForHits } from '../../lib/utils';
-import type { Hits, Connector, WidgetRenderState } from '../../types';
+import type { SendEventForHits } from '../../lib/utils/index.js';
+import type { Hits, Connector, WidgetRenderState } from '../../types/index.js';
 export declare type AutocompleteConnectorParams = {
     /**
      * Escapes HTML entities from hits string values.
diff --git a/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js b/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js
index dabfd64..8c296aa 100644
--- a/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js
+++ b/node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, createSendEventForHits, noop, warning } from '../../lib/utils';
+import { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, createSendEventForHits, noop, warning } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'autocomplete',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.d.ts b/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.d.ts
index 03f842f..7aed04e 100644
--- a/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, TransformItems, CreateURL, WidgetRenderState } from '../../types';
+import type { Connector, TransformItems, CreateURL, WidgetRenderState } from '../../types/index.js';
 export declare type BreadcrumbConnectorParamsItem = {
     /**
      * Label of the category or subcategory.
diff --git a/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js b/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js
index e61cd13..82c4f0c 100644
--- a/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js
+++ b/node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js
@@ -16,7 +16,7 @@ function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(
 
 function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
-import { checkRendering, warning, createDocumentationMessageGenerator, isEqual, noop } from '../../lib/utils';
+import { checkRendering, warning, createDocumentationMessageGenerator, isEqual, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'breadcrumb',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.d.ts b/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.d.ts
index bc71ead..cfc1744 100644
--- a/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.d.ts
@@ -1,4 +1,4 @@
-import type { TransformItems, CreateURL, Connector, WidgetRenderState } from '../../types';
+import type { TransformItems, CreateURL, Connector, WidgetRenderState } from '../../types/index.js';
 export declare type ClearRefinementsConnectorParams = {
     /**
      * The attributes to include in the refinements to clear (all by default). Cannot be used with `excludedAttributes`.
diff --git a/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.js b/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.js
index d4ad190..8cbef0a 100644
--- a/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.js
+++ b/node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.js
@@ -16,7 +16,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, clearRefinements, getRefinements, createDocumentationMessageGenerator, noop, uniq, mergeSearchParameters } from '../../lib/utils';
+import { checkRendering, clearRefinements, getRefinements, createDocumentationMessageGenerator, noop, uniq, mergeSearchParameters } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'clear-refinements',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.d.ts b/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.d.ts
index f6d4b56..c481543 100644
--- a/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.d.ts
@@ -1,6 +1,6 @@
 import type { SearchParameters, PlainSearchParameters } from 'algoliasearch-helper';
-import type { AlgoliaHit, Connector } from '../../types';
-import type { ConfigureWidgetDescription } from '../configure/connectConfigure';
+import type { AlgoliaHit, Connector } from '../../types/index.js';
+import type { ConfigureWidgetDescription } from '../configure/connectConfigure.js';
 export declare type MatchingPatterns = {
     [attribute: string]: {
         /**
diff --git a/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.js b/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.js
index 086cbec..b459945 100644
--- a/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.js
+++ b/node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.js
@@ -17,8 +17,8 @@ function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToAr
 function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
 
 import algoliasearchHelper from 'algoliasearch-helper';
-import { createDocumentationMessageGenerator, getObjectType, warning, getPropertyByPath } from '../../lib/utils';
-import connectConfigure from '../configure/connectConfigure';
+import { createDocumentationMessageGenerator, getObjectType, warning, getPropertyByPath } from '../../lib/utils/index.js';
+import connectConfigure from '../configure/connectConfigure.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'configure-related-items',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.d.ts b/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.d.ts
index 5c829b2..caa0e0a 100644
--- a/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.d.ts
@@ -1,5 +1,5 @@
 import type { PlainSearchParameters } from 'algoliasearch-helper';
-import type { Connector, WidgetRenderState } from '../../types';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
 /**
  * Refine the given search parameters.
  */
diff --git a/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js b/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js
index 20b98d2..322473c 100644
--- a/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js
+++ b/node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js
@@ -5,7 +5,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
 import algoliasearchHelper from 'algoliasearch-helper';
-import { createDocumentationMessageGenerator, isPlainObject, mergeSearchParameters, noop } from '../../lib/utils';
+import { createDocumentationMessageGenerator, isPlainObject, mergeSearchParameters, noop } from '../../lib/utils/index.js';
 /**
  * Refine the given search parameters.
  */
diff --git a/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.d.ts b/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.d.ts
index 4bbea00..22ec4a9 100644
--- a/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, TransformItems, CreateURL, WidgetRenderState } from '../../types';
+import type { Connector, TransformItems, CreateURL, WidgetRenderState } from '../../types/index.js';
 export declare type CurrentRefinementsConnectorParamsRefinement = {
     /**
      * The attribute on which the refinement is applied.
diff --git a/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.js b/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.js
index 14ea79a..eba7f88 100644
--- a/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.js
+++ b/node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.js
@@ -16,7 +16,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { getRefinements, checkRendering, createDocumentationMessageGenerator, noop, warning } from '../../lib/utils';
+import { getRefinements, checkRendering, createDocumentationMessageGenerator, noop, warning } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'current-refinements',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.d.ts b/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.d.ts
index 7cf06cf..4c7ca93 100644
--- a/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.d.ts
@@ -1,5 +1,5 @@
 import type { SearchResults } from 'algoliasearch-helper';
-import type { Connector, Widget } from '../../types';
+import type { Connector, Widget } from '../../types/index.js';
 export declare type DynamicWidgetsRenderState = {
     attributesToRender: string[];
 };
diff --git a/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.js b/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.js
index e415018..8ab543b 100644
--- a/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.js
+++ b/node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.js
@@ -6,7 +6,7 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 
 function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
 
-import { checkRendering, createDocumentationMessageGenerator, getWidgetAttribute, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, getWidgetAttribute, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'dynamic-widgets',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.d.ts b/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.d.ts
index ecba6e8..314376e 100644
--- a/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForHits } from '../../lib/utils';
-import type { Connector, GeoLoc, Hit, TransformItems, WidgetRenderState } from '../../types';
+import type { SendEventForHits } from '../../lib/utils/index.js';
+import type { Connector, GeoLoc, Hit, TransformItems, WidgetRenderState } from '../../types/index.js';
 export declare type GeoHit = Hit & Required<Pick<Hit, '_geoLoc'>>;
 declare type Bounds = {
     /**
diff --git a/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.js b/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.js
index 42e9fe0..b3d0d8b 100644
--- a/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.js
+++ b/node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, aroundLatLngToPosition, insideBoundingBoxToBoundingBox, createDocumentationMessageGenerator, createSendEventForHits, noop } from '../../lib/utils';
+import { checkRendering, aroundLatLngToPosition, insideBoundingBoxToBoundingBox, createDocumentationMessageGenerator, createSendEventForHits, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'geo-search',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.d.ts b/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.d.ts
index 173c8da..22463c0 100644
--- a/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForFacet } from '../../lib/utils';
-import type { Connector, CreateURL, TransformItems, SortBy, WidgetRenderState } from '../../types';
+import type { SendEventForFacet } from '../../lib/utils/index.js';
+import type { Connector, CreateURL, TransformItems, SortBy, WidgetRenderState } from '../../types/index.js';
 export declare type HierarchicalMenuItem = {
     /**
      * Value of the menu item.
diff --git a/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.js b/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.js
index a44c777..7a5abb9 100644
--- a/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.js
+++ b/node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.js
@@ -20,7 +20,7 @@ function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(
 
 function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
-import { checkRendering, warning, createDocumentationMessageGenerator, createSendEventForFacet, isEqual, noop } from '../../lib/utils';
+import { checkRendering, warning, createDocumentationMessageGenerator, createSendEventForFacet, isEqual, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'hierarchical-menu',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.d.ts b/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.d.ts
index 2ad5121..976a3dc 100644
--- a/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, TransformItems, WidgetRenderState } from '../../types';
+import type { Connector, TransformItems, WidgetRenderState } from '../../types/index.js';
 export declare type HitsPerPageRenderStateItem = {
     /**
      * Label to display in the option.
diff --git a/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js b/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js
index 7f44aa1..a944ae3 100644
--- a/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js
+++ b/node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js
@@ -16,7 +16,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, warning, createDocumentationMessageGenerator, noop } from '../../lib/utils';
+import { checkRendering, warning, createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'hits-per-page',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/hits/connectHits.d.ts b/node_modules/instantsearch.js/es/connectors/hits/connectHits.d.ts
index eae2fb6..0432588 100644
--- a/node_modules/instantsearch.js/es/connectors/hits/connectHits.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/hits/connectHits.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForHits, BindEventForHits } from '../../lib/utils';
-import type { TransformItems, Connector, Hits, Hit, WidgetRenderState } from '../../types';
+import type { SendEventForHits, BindEventForHits } from '../../lib/utils/index.js';
+import type { TransformItems, Connector, Hits, Hit, WidgetRenderState } from '../../types/index.js';
 import type { SearchResults } from 'algoliasearch-helper';
 export declare type HitsRenderState = {
     /**
diff --git a/node_modules/instantsearch.js/es/connectors/hits/connectHits.js b/node_modules/instantsearch.js/es/connectors/hits/connectHits.js
index d7a261a..cf582da 100644
--- a/node_modules/instantsearch.js/es/connectors/hits/connectHits.js
+++ b/node_modules/instantsearch.js/es/connectors/hits/connectHits.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, addAbsolutePosition, addQueryID, createSendEventForHits, createBindEventForHits, noop } from '../../lib/utils';
+import { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, addAbsolutePosition, addQueryID, createSendEventForHits, createBindEventForHits, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'hits',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/hits/connectHitsWithInsights.js b/node_modules/instantsearch.js/es/connectors/hits/connectHitsWithInsights.js
index 889f88e..b943252 100644
--- a/node_modules/instantsearch.js/es/connectors/hits/connectHitsWithInsights.js
+++ b/node_modules/instantsearch.js/es/connectors/hits/connectHitsWithInsights.js
@@ -1,4 +1,4 @@
-import { withInsights } from '../../lib/insights';
-import connectHits from './connectHits';
+import { withInsights } from '../../lib/insights.js';
+import connectHits from './connectHits.js';
 var connectHitsWithInsights = withInsights(connectHits);
 export default connectHitsWithInsights;
diff --git a/node_modules/instantsearch.js/es/connectors/index.d.ts b/node_modules/instantsearch.js/es/connectors/index.d.ts
index 9d7fa8c..c7e81b7 100644
--- a/node_modules/instantsearch.js/es/connectors/index.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/index.d.ts
@@ -1,32 +1,32 @@
-export { default as connectClearRefinements } from './clear-refinements/connectClearRefinements';
-export { default as connectCurrentRefinements } from './current-refinements/connectCurrentRefinements';
-export { default as connectHierarchicalMenu } from './hierarchical-menu/connectHierarchicalMenu';
-export { default as connectHits } from './hits/connectHits';
-export { default as connectHitsWithInsights } from './hits/connectHitsWithInsights';
-export { default as connectHitsPerPage } from './hits-per-page/connectHitsPerPage';
-export { default as connectInfiniteHits } from './infinite-hits/connectInfiniteHits';
-export { default as connectInfiniteHitsWithInsights } from './infinite-hits/connectInfiniteHitsWithInsights';
-export { default as connectMenu } from './menu/connectMenu';
-export { default as connectNumericMenu } from './numeric-menu/connectNumericMenu';
-export { default as connectPagination } from './pagination/connectPagination';
-export { default as connectRange } from './range/connectRange';
-export { default as connectRefinementList } from './refinement-list/connectRefinementList';
-export { default as connectSearchBox } from './search-box/connectSearchBox';
-export { default as connectSortBy } from './sort-by/connectSortBy';
-export { default as connectRatingMenu } from './rating-menu/connectRatingMenu';
-export { default as connectStats } from './stats/connectStats';
-export { default as connectToggleRefinement } from './toggle-refinement/connectToggleRefinement';
-export { default as connectBreadcrumb } from './breadcrumb/connectBreadcrumb';
-export { default as connectGeoSearch } from './geo-search/connectGeoSearch';
-export { default as connectPoweredBy } from './powered-by/connectPoweredBy';
-export { default as connectConfigure } from './configure/connectConfigure';
-export { default as EXPERIMENTAL_connectConfigureRelatedItems } from './configure-related-items/connectConfigureRelatedItems';
-export { default as connectAutocomplete } from './autocomplete/connectAutocomplete';
-export { default as connectQueryRules } from './query-rules/connectQueryRules';
-export { default as connectVoiceSearch } from './voice-search/connectVoiceSearch';
-export { default as EXPERIMENTAL_connectAnswers } from './answers/connectAnswers';
-export { default as connectRelevantSort } from './relevant-sort/connectRelevantSort';
-import connectDynamicWidgets from './dynamic-widgets/connectDynamicWidgets';
+export { default as connectClearRefinements } from './clear-refinements/connectClearRefinements.js';
+export { default as connectCurrentRefinements } from './current-refinements/connectCurrentRefinements.js';
+export { default as connectHierarchicalMenu } from './hierarchical-menu/connectHierarchicalMenu.js';
+export { default as connectHits } from './hits/connectHits.js';
+export { default as connectHitsWithInsights } from './hits/connectHitsWithInsights.js';
+export { default as connectHitsPerPage } from './hits-per-page/connectHitsPerPage.js';
+export { default as connectInfiniteHits } from './infinite-hits/connectInfiniteHits.js';
+export { default as connectInfiniteHitsWithInsights } from './infinite-hits/connectInfiniteHitsWithInsights.js';
+export { default as connectMenu } from './menu/connectMenu.js';
+export { default as connectNumericMenu } from './numeric-menu/connectNumericMenu.js';
+export { default as connectPagination } from './pagination/connectPagination.js';
+export { default as connectRange } from './range/connectRange.js';
+export { default as connectRefinementList } from './refinement-list/connectRefinementList.js';
+export { default as connectSearchBox } from './search-box/connectSearchBox.js';
+export { default as connectSortBy } from './sort-by/connectSortBy.js';
+export { default as connectRatingMenu } from './rating-menu/connectRatingMenu.js';
+export { default as connectStats } from './stats/connectStats.js';
+export { default as connectToggleRefinement } from './toggle-refinement/connectToggleRefinement.js';
+export { default as connectBreadcrumb } from './breadcrumb/connectBreadcrumb.js';
+export { default as connectGeoSearch } from './geo-search/connectGeoSearch.js';
+export { default as connectPoweredBy } from './powered-by/connectPoweredBy.js';
+export { default as connectConfigure } from './configure/connectConfigure.js';
+export { default as EXPERIMENTAL_connectConfigureRelatedItems } from './configure-related-items/connectConfigureRelatedItems.js';
+export { default as connectAutocomplete } from './autocomplete/connectAutocomplete.js';
+export { default as connectQueryRules } from './query-rules/connectQueryRules.js';
+export { default as connectVoiceSearch } from './voice-search/connectVoiceSearch.js';
+export { default as EXPERIMENTAL_connectAnswers } from './answers/connectAnswers.js';
+export { default as connectRelevantSort } from './relevant-sort/connectRelevantSort.js';
+import connectDynamicWidgets from './dynamic-widgets/connectDynamicWidgets.js';
 export { connectDynamicWidgets };
 /** @deprecated use connectDynamicWidgets */
 export declare const EXPERIMENTAL_connectDynamicWidgets: import("./dynamic-widgets/connectDynamicWidgets").DynamicWidgetsConnector;
diff --git a/node_modules/instantsearch.js/es/connectors/index.js b/node_modules/instantsearch.js/es/connectors/index.js
index a6b692b..e178211 100644
--- a/node_modules/instantsearch.js/es/connectors/index.js
+++ b/node_modules/instantsearch.js/es/connectors/index.js
@@ -1,34 +1,34 @@
-export { default as connectClearRefinements } from './clear-refinements/connectClearRefinements';
-export { default as connectCurrentRefinements } from './current-refinements/connectCurrentRefinements';
-export { default as connectHierarchicalMenu } from './hierarchical-menu/connectHierarchicalMenu';
-export { default as connectHits } from './hits/connectHits';
-export { default as connectHitsWithInsights } from './hits/connectHitsWithInsights';
-export { default as connectHitsPerPage } from './hits-per-page/connectHitsPerPage';
-export { default as connectInfiniteHits } from './infinite-hits/connectInfiniteHits';
-export { default as connectInfiniteHitsWithInsights } from './infinite-hits/connectInfiniteHitsWithInsights';
-export { default as connectMenu } from './menu/connectMenu';
-export { default as connectNumericMenu } from './numeric-menu/connectNumericMenu';
-export { default as connectPagination } from './pagination/connectPagination';
-export { default as connectRange } from './range/connectRange';
-export { default as connectRefinementList } from './refinement-list/connectRefinementList';
-export { default as connectSearchBox } from './search-box/connectSearchBox';
-export { default as connectSortBy } from './sort-by/connectSortBy';
-export { default as connectRatingMenu } from './rating-menu/connectRatingMenu';
-export { default as connectStats } from './stats/connectStats';
-export { default as connectToggleRefinement } from './toggle-refinement/connectToggleRefinement';
-export { default as connectBreadcrumb } from './breadcrumb/connectBreadcrumb';
-export { default as connectGeoSearch } from './geo-search/connectGeoSearch';
-export { default as connectPoweredBy } from './powered-by/connectPoweredBy';
-export { default as connectConfigure } from './configure/connectConfigure';
-export { default as EXPERIMENTAL_connectConfigureRelatedItems } from './configure-related-items/connectConfigureRelatedItems';
-export { default as connectAutocomplete } from './autocomplete/connectAutocomplete';
-export { default as connectQueryRules } from './query-rules/connectQueryRules';
-export { default as connectVoiceSearch } from './voice-search/connectVoiceSearch';
-export { default as EXPERIMENTAL_connectAnswers } from './answers/connectAnswers';
-export { default as connectRelevantSort } from './relevant-sort/connectRelevantSort';
-import connectDynamicWidgets from './dynamic-widgets/connectDynamicWidgets';
+export { default as connectClearRefinements } from './clear-refinements/connectClearRefinements.js';
+export { default as connectCurrentRefinements } from './current-refinements/connectCurrentRefinements.js';
+export { default as connectHierarchicalMenu } from './hierarchical-menu/connectHierarchicalMenu.js';
+export { default as connectHits } from './hits/connectHits.js';
+export { default as connectHitsWithInsights } from './hits/connectHitsWithInsights.js';
+export { default as connectHitsPerPage } from './hits-per-page/connectHitsPerPage.js';
+export { default as connectInfiniteHits } from './infinite-hits/connectInfiniteHits.js';
+export { default as connectInfiniteHitsWithInsights } from './infinite-hits/connectInfiniteHitsWithInsights.js';
+export { default as connectMenu } from './menu/connectMenu.js';
+export { default as connectNumericMenu } from './numeric-menu/connectNumericMenu.js';
+export { default as connectPagination } from './pagination/connectPagination.js';
+export { default as connectRange } from './range/connectRange.js';
+export { default as connectRefinementList } from './refinement-list/connectRefinementList.js';
+export { default as connectSearchBox } from './search-box/connectSearchBox.js';
+export { default as connectSortBy } from './sort-by/connectSortBy.js';
+export { default as connectRatingMenu } from './rating-menu/connectRatingMenu.js';
+export { default as connectStats } from './stats/connectStats.js';
+export { default as connectToggleRefinement } from './toggle-refinement/connectToggleRefinement.js';
+export { default as connectBreadcrumb } from './breadcrumb/connectBreadcrumb.js';
+export { default as connectGeoSearch } from './geo-search/connectGeoSearch.js';
+export { default as connectPoweredBy } from './powered-by/connectPoweredBy.js';
+export { default as connectConfigure } from './configure/connectConfigure.js';
+export { default as EXPERIMENTAL_connectConfigureRelatedItems } from './configure-related-items/connectConfigureRelatedItems.js';
+export { default as connectAutocomplete } from './autocomplete/connectAutocomplete.js';
+export { default as connectQueryRules } from './query-rules/connectQueryRules.js';
+export { default as connectVoiceSearch } from './voice-search/connectVoiceSearch.js';
+export { default as EXPERIMENTAL_connectAnswers } from './answers/connectAnswers.js';
+export { default as connectRelevantSort } from './relevant-sort/connectRelevantSort.js';
+import connectDynamicWidgets from './dynamic-widgets/connectDynamicWidgets.js';
 export { connectDynamicWidgets };
-import { deprecate } from '../lib/utils';
+import { deprecate } from '../lib/utils/index.js';
 /** @deprecated use connectDynamicWidgets */
 
 export var EXPERIMENTAL_connectDynamicWidgets = deprecate(connectDynamicWidgets, 'use connectDynamicWidgets');
diff --git a/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.d.ts b/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.d.ts
index bd0da20..fd951cc 100644
--- a/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.d.ts
@@ -1,6 +1,6 @@
 import type { PlainSearchParameters, SearchResults } from 'algoliasearch-helper';
-import type { Hits, Connector, TransformItems, Hit, WidgetRenderState } from '../../types';
-import type { SendEventForHits, BindEventForHits } from '../../lib/utils';
+import type { Hits, Connector, TransformItems, Hit, WidgetRenderState } from '../../types/index.js';
+import type { SendEventForHits, BindEventForHits } from '../../lib/utils/index.js';
 export declare type InfiniteHitsCachedHits = {
     [page: number]: Hits;
 };
diff --git a/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js b/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js
index b7d679f..f5b4e5d 100644
--- a/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js
+++ b/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js
@@ -20,7 +20,7 @@ function _objectWithoutProperties(source, excluded) { if (source == null) return
 
 function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
 
-import { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, isEqual, addAbsolutePosition, addQueryID, noop, createSendEventForHits, createBindEventForHits } from '../../lib/utils';
+import { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, isEqual, addAbsolutePosition, addQueryID, noop, createSendEventForHits, createBindEventForHits } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'infinite-hits',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHitsWithInsights.js b/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHitsWithInsights.js
index c994812..9abadab 100644
--- a/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHitsWithInsights.js
+++ b/node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHitsWithInsights.js
@@ -1,4 +1,4 @@
-import { withInsights } from '../../lib/insights';
-import connectInfiniteHits from './connectInfiniteHits';
+import { withInsights } from '../../lib/insights.js';
+import connectInfiniteHits from './connectInfiniteHits.js';
 var connectInfiniteHitsWithInsights = withInsights(connectInfiniteHits);
 export default connectInfiniteHitsWithInsights;
diff --git a/node_modules/instantsearch.js/es/connectors/menu/connectMenu.d.ts b/node_modules/instantsearch.js/es/connectors/menu/connectMenu.d.ts
index 71223af..fe50757 100644
--- a/node_modules/instantsearch.js/es/connectors/menu/connectMenu.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/menu/connectMenu.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForFacet } from '../../lib/utils';
-import type { Connector, CreateURL, SortBy, TransformItems, WidgetRenderState } from '../../types';
+import type { SendEventForFacet } from '../../lib/utils/index.js';
+import type { Connector, CreateURL, SortBy, TransformItems, WidgetRenderState } from '../../types/index.js';
 export declare type MenuItem = {
     /**
      * The value of the menu item.
diff --git a/node_modules/instantsearch.js/es/connectors/menu/connectMenu.js b/node_modules/instantsearch.js/es/connectors/menu/connectMenu.js
index 4b3a8c6..5a6aa54 100644
--- a/node_modules/instantsearch.js/es/connectors/menu/connectMenu.js
+++ b/node_modules/instantsearch.js/es/connectors/menu/connectMenu.js
@@ -20,7 +20,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, createSendEventForFacet, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, createSendEventForFacet, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'menu',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.d.ts b/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.d.ts
index 6375369..4894dad 100644
--- a/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForFacet } from '../../lib/utils';
-import type { Connector, CreateURL, TransformItems, WidgetRenderState } from '../../types';
+import type { SendEventForFacet } from '../../lib/utils/index.js';
+import type { Connector, CreateURL, TransformItems, WidgetRenderState } from '../../types/index.js';
 export declare type NumericMenuConnectorParamsItem = {
     /**
      * Name of the option
diff --git a/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.js b/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.js
index d96ec21..0b94c80 100644
--- a/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.js
+++ b/node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.js
@@ -16,7 +16,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, isFiniteNumber, convertNumericRefinementsToFilters, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, isFiniteNumber, convertNumericRefinementsToFilters, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'numeric-menu',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/pagination/Paginator.js b/node_modules/instantsearch.js/es/connectors/pagination/Paginator.js
index dc90390..bdbc5db 100644
--- a/node_modules/instantsearch.js/es/connectors/pagination/Paginator.js
+++ b/node_modules/instantsearch.js/es/connectors/pagination/Paginator.js
@@ -6,7 +6,7 @@ function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _d
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { range } from '../../lib/utils';
+import { range } from '../../lib/utils/index.js';
 
 var Paginator = /*#__PURE__*/function () {
   function Paginator(params) {
diff --git a/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.d.ts b/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.d.ts
index 0cef236..cce3f35 100644
--- a/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, CreateURL, WidgetRenderState } from '../../types';
+import type { Connector, CreateURL, WidgetRenderState } from '../../types/index.js';
 export declare type PaginationConnectorParams = {
     /**
      * The total number of pages to browse.
diff --git a/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js b/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js
index d72d6c1..3726570 100644
--- a/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js
+++ b/node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js
@@ -4,8 +4,8 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils';
-import Paginator from './Paginator';
+import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
+import Paginator from './Paginator.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'pagination',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.d.ts b/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.d.ts
index 667ac5a..38c1bb3 100644
--- a/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, WidgetRenderState } from '../../types';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
 export declare type PoweredByRenderState = {
     /** the url to redirect to on click */
     url: string;
diff --git a/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.js b/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.js
index 452fd50..53b1276 100644
--- a/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.js
+++ b/node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { safelyRunOnBrowser, checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils';
+import { safelyRunOnBrowser, checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'powered-by',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.d.ts b/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.d.ts
index 0ff5b8e..f3e69f9 100644
--- a/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, TransformItems, WidgetRenderState } from '../../types';
+import type { Connector, TransformItems, WidgetRenderState } from '../../types/index.js';
 declare type TrackedFilterRefinement = string | number | boolean;
 export declare type ParamTrackedFilters = {
     [facetName: string]: (facetValues: TrackedFilterRefinement[]) => TrackedFilterRefinement[];
diff --git a/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.js b/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.js
index 61df9ed..13dd2b4 100644
--- a/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.js
+++ b/node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.js
@@ -16,7 +16,7 @@ function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToAr
 
 function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
 
-import { checkRendering, createDocumentationMessageGenerator, warning, getRefinements, isEqual, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, warning, getRefinements, isEqual, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'query-rules',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/range/connectRange.d.ts b/node_modules/instantsearch.js/es/connectors/range/connectRange.d.ts
index abf6886..e206552 100644
--- a/node_modules/instantsearch.js/es/connectors/range/connectRange.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/range/connectRange.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForFacet } from '../../lib/utils';
-import type { Connector, WidgetRenderState } from '../../types';
+import type { SendEventForFacet } from '../../lib/utils/index.js';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
 export declare type RangeMin = number | undefined;
 export declare type RangeMax = number | undefined;
 export declare type RangeBoundaries = [RangeMin, RangeMax];
diff --git a/node_modules/instantsearch.js/es/connectors/range/connectRange.js b/node_modules/instantsearch.js/es/connectors/range/connectRange.js
index 971e5d0..969f05f 100644
--- a/node_modules/instantsearch.js/es/connectors/range/connectRange.js
+++ b/node_modules/instantsearch.js/es/connectors/range/connectRange.js
@@ -16,7 +16,7 @@ function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(
 
 function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
-import { checkRendering, createDocumentationMessageGenerator, convertNumericRefinementsToFilters, isFiniteNumber, find, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, convertNumericRefinementsToFilters, isFiniteNumber, find, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'range-input',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.d.ts b/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.d.ts
index 4a29c9f..e280419 100644
--- a/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.d.ts
@@ -1,5 +1,5 @@
-import type { Connector, CreateURL, WidgetRenderState } from '../../types';
-import type { InsightsEvent } from '../../middlewares';
+import type { Connector, CreateURL, WidgetRenderState } from '../../types/index.js';
+import type { InsightsEvent } from '../../middlewares.js';
 declare type SendEvent = (...args: [InsightsEvent] | [string, string, string?]) => void;
 declare type StarRatingItems = {
     /**
diff --git a/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.js b/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.js
index 2f500a1..0fbb96f 100644
--- a/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.js
+++ b/node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.js
@@ -24,7 +24,7 @@ function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(
 
 function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
-import { checkRendering, createDocumentationLink, createDocumentationMessageGenerator, noop, warning } from '../../lib/utils';
+import { checkRendering, createDocumentationLink, createDocumentationMessageGenerator, noop, warning } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'rating-menu',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.d.ts b/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.d.ts
index ffb732c..b9f449e 100644
--- a/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForFacet } from '../../lib/utils';
-import type { Connector, TransformItems, SortBy, CreateURL, WidgetRenderState } from '../../types';
+import type { SendEventForFacet } from '../../lib/utils/index.js';
+import type { Connector, TransformItems, SortBy, CreateURL, WidgetRenderState } from '../../types/index.js';
 export declare type RefinementListItem = {
     /**
      * The value of the refinement list item.
diff --git a/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js b/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js
index 88e2b79..6cfe279 100644
--- a/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js
+++ b/node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js
@@ -8,7 +8,7 @@ function _objectWithoutProperties(source, excluded) { if (source == null) return
 
 function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
 
-import { escapeFacets, TAG_PLACEHOLDER, TAG_REPLACEMENT, checkRendering, createDocumentationMessageGenerator, createSendEventForFacet, noop } from '../../lib/utils';
+import { escapeFacets, TAG_PLACEHOLDER, TAG_REPLACEMENT, checkRendering, createDocumentationMessageGenerator, createSendEventForFacet, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'refinement-list',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.d.ts b/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.d.ts
index a11e591..570311c 100644
--- a/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, WidgetRenderState } from '../../types';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
 export declare type RelevantSortConnectorParams = Record<string, unknown>;
 declare type Refine = (relevancyStrictness: number) => void;
 export declare type RelevantSortRenderState = {
diff --git a/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.js b/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.js
index 7c35d03..d642bdc 100644
--- a/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.js
+++ b/node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { noop } from '../../lib/utils';
+import { noop } from '../../lib/utils/index.js';
 
 var connectRelevantSort = function connectRelevantSort() {
   var renderFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
diff --git a/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.d.ts b/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.d.ts
index 667db65..c3c1199 100644
--- a/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, WidgetRenderState } from '../../types';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
 export declare type SearchBoxConnectorParams = {
     /**
      * A function that will be called every time
diff --git a/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js b/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js
index ad63968..405970b 100644
--- a/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js
+++ b/node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'search-box',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.d.ts b/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.d.ts
index f05e7c0..ab0be37 100644
--- a/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, TransformItems, WidgetRenderState } from '../../types';
+import type { Connector, TransformItems, WidgetRenderState } from '../../types/index.js';
 /**
  * The **SortBy** connector provides the logic to build a custom widget that will display a
  * list of indices. With Algolia, this is most commonly used for changing ranking strategy. This allows
diff --git a/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.js b/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.js
index e0333b6..38df869 100644
--- a/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.js
+++ b/node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, find, warning, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, find, warning, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'sort-by',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/stats/connectStats.d.ts b/node_modules/instantsearch.js/es/connectors/stats/connectStats.d.ts
index ddb1686..c2b7446 100644
--- a/node_modules/instantsearch.js/es/connectors/stats/connectStats.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/stats/connectStats.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, WidgetRenderState } from '../../types';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
 /**
  * **Stats** connector provides the logic to build a custom widget that will displays
  * search statistics (hits number and processing time).
diff --git a/node_modules/instantsearch.js/es/connectors/stats/connectStats.js b/node_modules/instantsearch.js/es/connectors/stats/connectStats.js
index 82131d3..a4cbb18 100644
--- a/node_modules/instantsearch.js/es/connectors/stats/connectStats.js
+++ b/node_modules/instantsearch.js/es/connectors/stats/connectStats.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils';
+import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'stats',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.d.ts b/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.d.ts
index cd9566e..39ca217 100644
--- a/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.d.ts
@@ -1,4 +1,4 @@
-import type { Connector, CreateURL, WidgetRenderState } from '../../types';
+import type { Connector, CreateURL, WidgetRenderState } from '../../types/index.js';
 declare type BuiltInSendEventForToggle = (eventType: string, isRefined: boolean, eventName?: string) => void;
 declare type CustomSendEventForToggle = (customPayload: any) => void;
 export declare type SendEventForToggle = BuiltInSendEventForToggle & CustomSendEventForToggle;
diff --git a/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.js b/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.js
index 4c2a6ce..fd00c49 100644
--- a/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.js
+++ b/node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, escapeRefinement, unescapeRefinement, createDocumentationMessageGenerator, find, noop, toArray } from '../../lib/utils';
+import { checkRendering, escapeRefinement, unescapeRefinement, createDocumentationMessageGenerator, find, noop, toArray } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'toggle-refinement',
   connector: true
diff --git a/node_modules/instantsearch.js/es/connectors/toggle-refinement/types.d.ts b/node_modules/instantsearch.js/es/connectors/toggle-refinement/types.d.ts
index c6f9aef..e37cd91 100644
--- a/node_modules/instantsearch.js/es/connectors/toggle-refinement/types.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/toggle-refinement/types.d.ts
@@ -1,5 +1,5 @@
-import type { SendEventForFacet } from '../../lib/utils';
-import type { Connector, CreateURL, WidgetRenderState } from '../../types';
+import type { SendEventForFacet } from '../../lib/utils/index.js';
+import type { Connector, CreateURL, WidgetRenderState } from '../../types/index.js';
 declare type ToggleRefinementConnectorParams = {
     attribute: string;
     on: string | string[];
diff --git a/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.d.ts b/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.d.ts
index 14b534b..2c2c033 100644
--- a/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.d.ts
+++ b/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.d.ts
@@ -1,6 +1,6 @@
 import type { PlainSearchParameters } from 'algoliasearch-helper';
-import type { Connector, WidgetRenderState } from '../../types';
-import type { CreateVoiceSearchHelper, VoiceListeningState } from '../../lib/voiceSearchHelper/types';
+import type { Connector, WidgetRenderState } from '../../types/index.js';
+import type { CreateVoiceSearchHelper, VoiceListeningState } from '../../lib/voiceSearchHelper/types/index.js';
 export declare type VoiceSearchConnectorParams = {
     searchAsYouSpeak?: boolean;
     language?: string;
diff --git a/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.js b/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.js
index 5f5400f..8fdffd2 100644
--- a/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.js
+++ b/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.js
@@ -4,8 +4,8 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils';
-import builtInCreateVoiceSearchHelper from '../../lib/voiceSearchHelper';
+import { checkRendering, createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
+import builtInCreateVoiceSearchHelper from '../../lib/voiceSearchHelper.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'voice-search',
   connector: true
diff --git a/node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js b/node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js
index 85817fb..269f7a1 100644
--- a/node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js
+++ b/node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js
@@ -1,4 +1,4 @@
-import { warning } from '../lib/utils';
+import { warning } from '../lib/utils/index.js';
 export var ANONYMOUS_TOKEN_COOKIE_KEY = '_ALGOLIA';
 
 function getCookie(name) {
diff --git a/node_modules/instantsearch.js/es/helpers/highlight.d.ts b/node_modules/instantsearch.js/es/helpers/highlight.d.ts
index 0c9cda4..7eb3949 100644
--- a/node_modules/instantsearch.js/es/helpers/highlight.d.ts
+++ b/node_modules/instantsearch.js/es/helpers/highlight.d.ts
@@ -1,4 +1,4 @@
-import type { Hit } from '../types';
+import type { Hit } from '../types/index.js';
 export declare type HighlightOptions = {
     attribute: string | string[];
     highlightedTagName?: string;
diff --git a/node_modules/instantsearch.js/es/helpers/highlight.js b/node_modules/instantsearch.js/es/helpers/highlight.js
index c03fbbd..e1c9fbf 100644
--- a/node_modules/instantsearch.js/es/helpers/highlight.js
+++ b/node_modules/instantsearch.js/es/helpers/highlight.js
@@ -1,5 +1,5 @@
-import { component } from '../lib/suit';
-import { getPropertyByPath, TAG_REPLACEMENT } from '../lib/utils';
+import { component } from '../lib/suit.js';
+import { getPropertyByPath, TAG_REPLACEMENT } from '../lib/utils/index.js';
 var suit = component('Highlight');
 export default function highlight(_ref) {
   var attribute = _ref.attribute,
diff --git a/node_modules/instantsearch.js/es/helpers/index.d.ts b/node_modules/instantsearch.js/es/helpers/index.d.ts
index 08913d7..1c575a0 100644
--- a/node_modules/instantsearch.js/es/helpers/index.d.ts
+++ b/node_modules/instantsearch.js/es/helpers/index.d.ts
@@ -1,10 +1,10 @@
-export * from './highlight';
-export * from './reverseHighlight';
-export * from './snippet';
-export * from './reverseSnippet';
-export { default as reverseHighlight } from './reverseHighlight';
-export { default as reverseSnippet } from './reverseSnippet';
-export { default as highlight } from './highlight';
-export { default as snippet } from './snippet';
-export { default as insights } from './insights';
-export { default as getInsightsAnonymousUserToken, getInsightsAnonymousUserTokenInternal, } from './get-insights-anonymous-user-token';
+export * from './highlight.js';
+export * from './reverseHighlight.js';
+export * from './snippet.js';
+export * from './reverseSnippet.js';
+export { default as reverseHighlight } from './reverseHighlight.js';
+export { default as reverseSnippet } from './reverseSnippet.js';
+export { default as highlight } from './highlight.js';
+export { default as snippet } from './snippet.js';
+export { default as insights } from './insights.js';
+export { default as getInsightsAnonymousUserToken, getInsightsAnonymousUserTokenInternal, } from './get-insights-anonymous-user-token.js';
diff --git a/node_modules/instantsearch.js/es/helpers/index.js b/node_modules/instantsearch.js/es/helpers/index.js
index 30d332f..dd32a11 100644
--- a/node_modules/instantsearch.js/es/helpers/index.js
+++ b/node_modules/instantsearch.js/es/helpers/index.js
@@ -1,10 +1,10 @@
-export * from './highlight';
-export * from './reverseHighlight';
-export * from './snippet';
-export * from './reverseSnippet';
-export { default as reverseHighlight } from './reverseHighlight';
-export { default as reverseSnippet } from './reverseSnippet';
-export { default as highlight } from './highlight';
-export { default as snippet } from './snippet';
-export { default as insights } from './insights';
-export { default as getInsightsAnonymousUserToken, getInsightsAnonymousUserTokenInternal } from './get-insights-anonymous-user-token';
\ No newline at end of file
+export * from './highlight.js';
+export * from './reverseHighlight.js';
+export * from './snippet.js';
+export * from './reverseSnippet.js';
+export { default as reverseHighlight } from './reverseHighlight.js';
+export { default as reverseSnippet } from './reverseSnippet.js';
+export { default as highlight } from './highlight.js';
+export { default as snippet } from './snippet.js';
+export { default as insights } from './insights.js';
+export { default as getInsightsAnonymousUserToken, getInsightsAnonymousUserTokenInternal } from './get-insights-anonymous-user-token.js';
diff --git a/node_modules/instantsearch.js/es/helpers/insights.d.ts b/node_modules/instantsearch.js/es/helpers/insights.d.ts
index 84096fc..551e1db 100644
--- a/node_modules/instantsearch.js/es/helpers/insights.d.ts
+++ b/node_modules/instantsearch.js/es/helpers/insights.d.ts
@@ -1,4 +1,4 @@
-import type { InsightsClientMethod, InsightsClientPayload } from '../types';
+import type { InsightsClientMethod, InsightsClientPayload } from '../types/index.js';
 export declare function readDataAttributes(domElement: HTMLElement): {
     method: InsightsClientMethod;
     payload: Partial<InsightsClientPayload>;
diff --git a/node_modules/instantsearch.js/es/helpers/insights.js b/node_modules/instantsearch.js/es/helpers/insights.js
index 5ec2143..64bc2c8 100644
--- a/node_modules/instantsearch.js/es/helpers/insights.js
+++ b/node_modules/instantsearch.js/es/helpers/insights.js
@@ -1,6 +1,6 @@
 function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
 
-import { warning, serializePayload, deserializePayload } from '../lib/utils';
+import { warning, serializePayload, deserializePayload } from '../lib/utils/index.js';
 export function readDataAttributes(domElement) {
   var method = domElement.getAttribute('data-insights-method');
   var serializedPayload = domElement.getAttribute('data-insights-payload');
diff --git a/node_modules/instantsearch.js/es/helpers/reverseHighlight.d.ts b/node_modules/instantsearch.js/es/helpers/reverseHighlight.d.ts
index 0563b77..b5583b7 100644
--- a/node_modules/instantsearch.js/es/helpers/reverseHighlight.d.ts
+++ b/node_modules/instantsearch.js/es/helpers/reverseHighlight.d.ts
@@ -1,4 +1,4 @@
-import type { Hit } from '../types';
+import type { Hit } from '../types/index.js';
 export declare type ReverseHighlightOptions = {
     attribute: string | string[];
     highlightedTagName?: string;
diff --git a/node_modules/instantsearch.js/es/helpers/reverseHighlight.js b/node_modules/instantsearch.js/es/helpers/reverseHighlight.js
index eaab56c..e890e2f 100644
--- a/node_modules/instantsearch.js/es/helpers/reverseHighlight.js
+++ b/node_modules/instantsearch.js/es/helpers/reverseHighlight.js
@@ -1,5 +1,5 @@
-import { TAG_REPLACEMENT, getPropertyByPath, getHighlightedParts, reverseHighlightedParts, concatHighlightedParts } from '../lib/utils';
-import { component } from '../lib/suit';
+import { TAG_REPLACEMENT, getPropertyByPath, getHighlightedParts, reverseHighlightedParts, concatHighlightedParts } from '../lib/utils/index.js';
+import { component } from '../lib/suit.js';
 var suit = component('ReverseHighlight');
 export default function reverseHighlight(_ref) {
   var attribute = _ref.attribute,
diff --git a/node_modules/instantsearch.js/es/helpers/reverseSnippet.d.ts b/node_modules/instantsearch.js/es/helpers/reverseSnippet.d.ts
index 3dd4a7f..8b7bd63 100644
--- a/node_modules/instantsearch.js/es/helpers/reverseSnippet.d.ts
+++ b/node_modules/instantsearch.js/es/helpers/reverseSnippet.d.ts
@@ -1,4 +1,4 @@
-import type { Hit } from '../types';
+import type { Hit } from '../types/index.js';
 export declare type ReverseSnippetOptions = {
     attribute: string | string[];
     highlightedTagName?: string;
diff --git a/node_modules/instantsearch.js/es/helpers/reverseSnippet.js b/node_modules/instantsearch.js/es/helpers/reverseSnippet.js
index 03a5628..8e2b551 100644
--- a/node_modules/instantsearch.js/es/helpers/reverseSnippet.js
+++ b/node_modules/instantsearch.js/es/helpers/reverseSnippet.js
@@ -1,5 +1,5 @@
-import { TAG_REPLACEMENT, getPropertyByPath, getHighlightedParts, reverseHighlightedParts, concatHighlightedParts } from '../lib/utils';
-import { component } from '../lib/suit';
+import { TAG_REPLACEMENT, getPropertyByPath, getHighlightedParts, reverseHighlightedParts, concatHighlightedParts } from '../lib/utils/index.js';
+import { component } from '../lib/suit.js';
 var suit = component('ReverseSnippet');
 export default function reverseSnippet(_ref) {
   var attribute = _ref.attribute,
diff --git a/node_modules/instantsearch.js/es/helpers/snippet.d.ts b/node_modules/instantsearch.js/es/helpers/snippet.d.ts
index 07c76e1..6d1f013 100644
--- a/node_modules/instantsearch.js/es/helpers/snippet.d.ts
+++ b/node_modules/instantsearch.js/es/helpers/snippet.d.ts
@@ -1,4 +1,4 @@
-import type { Hit } from '../types';
+import type { Hit } from '../types/index.js';
 export declare type SnippetOptions = {
     attribute: string | string[];
     highlightedTagName?: string;
diff --git a/node_modules/instantsearch.js/es/helpers/snippet.js b/node_modules/instantsearch.js/es/helpers/snippet.js
index db66cc5..79be047 100644
--- a/node_modules/instantsearch.js/es/helpers/snippet.js
+++ b/node_modules/instantsearch.js/es/helpers/snippet.js
@@ -1,5 +1,5 @@
-import { component } from '../lib/suit';
-import { TAG_REPLACEMENT, getPropertyByPath } from '../lib/utils';
+import { component } from '../lib/suit.js';
+import { TAG_REPLACEMENT, getPropertyByPath } from '../lib/utils/index.js';
 var suit = component('Snippet');
 export default function snippet(_ref) {
   var attribute = _ref.attribute,
diff --git a/node_modules/instantsearch.js/es/index.d.ts b/node_modules/instantsearch.js/es/index.d.ts
index abae9ee..d3a4754 100644
--- a/node_modules/instantsearch.js/es/index.d.ts
+++ b/node_modules/instantsearch.js/es/index.d.ts
@@ -1,8 +1,8 @@
-import type { Expand, UiState } from './types';
-import type { InstantSearchOptions } from './lib/InstantSearch';
-import InstantSearch from './lib/InstantSearch';
-import { snippet, reverseSnippet, highlight, reverseHighlight, insights, getInsightsAnonymousUserToken } from './helpers';
-import { createInfiniteHitsSessionStorageCache } from './lib/infiniteHitsCache';
+import type { Expand, UiState } from './types/index.js';
+import type { InstantSearchOptions } from './lib/InstantSearch.js';
+import InstantSearch from './lib/InstantSearch.js';
+import { snippet, reverseSnippet, highlight, reverseHighlight, insights, getInsightsAnonymousUserToken } from './helpers/index.js';
+import { createInfiniteHitsSessionStorageCache } from './lib/infiniteHitsCache/index.js';
 declare type InstantSearchModule = {
     <TUiState = Record<string, unknown>, TRouteState = TUiState>(options: InstantSearchOptions<Expand<UiState & TUiState>, TRouteState>): InstantSearch<Expand<UiState & TUiState>, TRouteState>;
     version: string;
@@ -44,4 +44,4 @@ declare type InstantSearchModule = {
  */
 declare const instantsearch: InstantSearchModule;
 export default instantsearch;
-export * from './types';
+export * from './types/index.js';
diff --git a/node_modules/instantsearch.js/es/index.js b/node_modules/instantsearch.js/es/index.js
index 329c8a8..e860a71 100644
--- a/node_modules/instantsearch.js/es/index.js
+++ b/node_modules/instantsearch.js/es/index.js
@@ -1,8 +1,8 @@
-import InstantSearch from './lib/InstantSearch';
-import version from './lib/version';
-import { snippet, reverseSnippet, highlight, reverseHighlight, insights, getInsightsAnonymousUserToken } from './helpers';
-import { createInfiniteHitsSessionStorageCache } from './lib/infiniteHitsCache';
-import { deprecate } from './lib/utils';
+import InstantSearch from './lib/InstantSearch.js';
+import version from './lib/version.js';
+import { snippet, reverseSnippet, highlight, reverseHighlight, insights, getInsightsAnonymousUserToken } from './helpers/index.js';
+import { createInfiniteHitsSessionStorageCache } from './lib/infiniteHitsCache/index.js';
+import { deprecate } from './lib/utils/index.js';
 
 /**
  * InstantSearch is the main component of InstantSearch.js. This object
@@ -42,4 +42,4 @@ Object.defineProperty(instantsearch, 'connectors', {
   }
 });
 export default instantsearch;
-export * from './types';
+export * from './types/index.js';
diff --git a/node_modules/instantsearch.js/es/lib/InstantSearch.d.ts b/node_modules/instantsearch.js/es/lib/InstantSearch.d.ts
index 1fe4116..03c81aa 100644
--- a/node_modules/instantsearch.js/es/lib/InstantSearch.d.ts
+++ b/node_modules/instantsearch.js/es/lib/InstantSearch.d.ts
@@ -1,10 +1,10 @@
 /// <reference types="node" />
 import type { AlgoliaSearchHelper } from 'algoliasearch-helper';
 import EventEmitter from 'events';
-import type { IndexWidget } from '../widgets/index/index';
-import type { InsightsClient as AlgoliaInsightsClient, SearchClient, Widget, UiState, CreateURL, Middleware, MiddlewareDefinition, RenderState } from '../types';
-import type { RouterProps } from '../middlewares/createRouterMiddleware';
-import type { InsightsEvent } from '../middlewares/createInsightsMiddleware';
+import type { IndexWidget } from '../widgets/index/index.js';
+import type { InsightsClient as AlgoliaInsightsClient, SearchClient, Widget, UiState, CreateURL, Middleware, MiddlewareDefinition, RenderState } from '../types/index.js';
+import type { RouterProps } from '../middlewares/createRouterMiddleware.js';
+import type { InsightsEvent } from '../middlewares/createInsightsMiddleware.js';
 /**
  * Global options for an InstantSearch instance.
  */
diff --git a/node_modules/instantsearch.js/es/lib/InstantSearch.js b/node_modules/instantsearch.js/es/lib/InstantSearch.js
index 214d0ce..112b9cc 100644
--- a/node_modules/instantsearch.js/es/lib/InstantSearch.js
+++ b/node_modules/instantsearch.js/es/lib/InstantSearch.js
@@ -28,12 +28,12 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 
 import algoliasearchHelper from 'algoliasearch-helper';
 import EventEmitter from 'events';
-import index, { isIndexWidget } from '../widgets/index/index';
-import version from './version';
-import createHelpers from './createHelpers';
-import { createDocumentationMessageGenerator, createDocumentationLink, defer, noop, warning, checkIndexUiState } from './utils';
-import { createRouterMiddleware } from '../middlewares/createRouterMiddleware';
-import { createMetadataMiddleware, isMetadataEnabled } from '../middlewares/createMetadataMiddleware';
+import index, { isIndexWidget } from '../widgets/index/index.js';
+import version from './version.js';
+import createHelpers from './createHelpers.js';
+import { createDocumentationMessageGenerator, createDocumentationLink, defer, noop, warning, checkIndexUiState } from './utils/index.js';
+import { createRouterMiddleware } from '../middlewares/createRouterMiddleware.js';
+import { createMetadataMiddleware, isMetadataEnabled } from '../middlewares/createMetadataMiddleware.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'instantsearch'
 });
diff --git a/node_modules/instantsearch.js/es/lib/createHelpers.d.ts b/node_modules/instantsearch.js/es/lib/createHelpers.d.ts
index c452f47..f5529e3 100644
--- a/node_modules/instantsearch.js/es/lib/createHelpers.d.ts
+++ b/node_modules/instantsearch.js/es/lib/createHelpers.d.ts
@@ -1,4 +1,4 @@
-import type { HoganHelpers } from '../types';
+import type { HoganHelpers } from '../types/index.js';
 declare type DefaultHoganHelpers = HoganHelpers<'formatNumber' | 'highlight' | 'reverseHighlight' | 'snippet' | 'reverseSnippet' | 'insights'>;
 export default function hoganHelpers({ numberLocale, }: {
     numberLocale?: string;
diff --git a/node_modules/instantsearch.js/es/lib/createHelpers.js b/node_modules/instantsearch.js/es/lib/createHelpers.js
index a7201c0..496fed2 100644
--- a/node_modules/instantsearch.js/es/lib/createHelpers.js
+++ b/node_modules/instantsearch.js/es/lib/createHelpers.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { highlight as _highlight, reverseHighlight as _reverseHighlight, snippet as _snippet, reverseSnippet as _reverseSnippet, insights as _insights } from '../helpers';
+import { highlight as _highlight, reverseHighlight as _reverseHighlight, snippet as _snippet, reverseSnippet as _reverseSnippet, insights as _insights } from '../helpers/index.js';
 export default function hoganHelpers(_ref) {
   var numberLocale = _ref.numberLocale;
   return {
diff --git a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.d.ts b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.d.ts
index 6fd47d4..9f5a9a2 100644
--- a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.d.ts
+++ b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.d.ts
@@ -1 +1 @@
-export { default as createInfiniteHitsSessionStorageCache } from './sessionStorage';
+export { default as createInfiniteHitsSessionStorageCache } from './sessionStorage.js';
diff --git a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.js b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.js
index 06ca1d4..9f5a9a2 100644
--- a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.js
+++ b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/index.js
@@ -1 +1 @@
-export { default as createInfiniteHitsSessionStorageCache } from './sessionStorage';
\ No newline at end of file
+export { default as createInfiniteHitsSessionStorageCache } from './sessionStorage.js';
diff --git a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.d.ts b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.d.ts
index 7e2ed93..8a2ba82 100644
--- a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.d.ts
+++ b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.d.ts
@@ -1,2 +1,2 @@
-import type { InfiniteHitsCache } from '../../connectors/infinite-hits/connectInfiniteHits';
+import type { InfiniteHitsCache } from '../../connectors/infinite-hits/connectInfiniteHits.js';
 export default function createInfiniteHitsSessionStorageCache(): InfiniteHitsCache;
diff --git a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.js b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.js
index 92a8110..996e31f 100644
--- a/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.js
+++ b/node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.js
@@ -2,7 +2,7 @@ function _objectWithoutProperties(source, excluded) { if (source == null) return
 
 function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
 
-import { isEqual, safelyRunOnBrowser } from '../utils';
+import { isEqual, safelyRunOnBrowser } from '../utils/index.js';
 
 function getStateWithoutPage(state) {
   var _ref = state || {},
diff --git a/node_modules/instantsearch.js/es/lib/insights/client.d.ts b/node_modules/instantsearch.js/es/lib/insights/client.d.ts
index 849a131..61a586a 100644
--- a/node_modules/instantsearch.js/es/lib/insights/client.d.ts
+++ b/node_modules/instantsearch.js/es/lib/insights/client.d.ts
@@ -1,5 +1,5 @@
 import type { SearchResults } from 'algoliasearch-helper';
-import type { Hits, InsightsClientMethod, InsightsClientPayload, Connector } from '../../types';
+import type { Hits, InsightsClientMethod, InsightsClientPayload, Connector } from '../../types/index.js';
 export declare const inferPayload: ({ method, results, hits, objectIDs, }: {
     method: InsightsClientMethod;
     results: SearchResults;
diff --git a/node_modules/instantsearch.js/es/lib/insights/client.js b/node_modules/instantsearch.js/es/lib/insights/client.js
index ef7b1d6..a786505 100644
--- a/node_modules/instantsearch.js/es/lib/insights/client.js
+++ b/node_modules/instantsearch.js/es/lib/insights/client.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { uniq, find, createDocumentationMessageGenerator, warning } from '../utils';
+import { uniq, find, createDocumentationMessageGenerator, warning } from '../utils/index.js';
 
 var getSelectedHits = function getSelectedHits(hits, selectedObjectIDs) {
   return selectedObjectIDs.map(function (objectID) {
diff --git a/node_modules/instantsearch.js/es/lib/insights/index.d.ts b/node_modules/instantsearch.js/es/lib/insights/index.d.ts
index 31cf584..104fbf2 100644
--- a/node_modules/instantsearch.js/es/lib/insights/index.d.ts
+++ b/node_modules/instantsearch.js/es/lib/insights/index.d.ts
@@ -1,2 +1,2 @@
-export { default as withInsights, inferPayload as inferInsightsPayload, } from './client';
-export { default as withInsightsListener } from './listener';
+export { default as withInsights, inferPayload as inferInsightsPayload, } from './client.js';
+export { default as withInsightsListener } from './listener.js';
diff --git a/node_modules/instantsearch.js/es/lib/insights/index.js b/node_modules/instantsearch.js/es/lib/insights/index.js
index 34e7d5e..6f5517e 100644
--- a/node_modules/instantsearch.js/es/lib/insights/index.js
+++ b/node_modules/instantsearch.js/es/lib/insights/index.js
@@ -1,2 +1,2 @@
-export { default as withInsights, inferPayload as inferInsightsPayload } from './client';
-export { default as withInsightsListener } from './listener';
\ No newline at end of file
+export { default as withInsights, inferPayload as inferInsightsPayload } from './client.js';
+export { default as withInsightsListener } from './listener.js';
diff --git a/node_modules/instantsearch.js/es/lib/insights/listener.d.ts b/node_modules/instantsearch.js/es/lib/insights/listener.d.ts
index 15d078c..ba3f895 100644
--- a/node_modules/instantsearch.js/es/lib/insights/listener.d.ts
+++ b/node_modules/instantsearch.js/es/lib/insights/listener.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import type { InsightsClient } from '../../types';
-import type { InsightsEvent } from '../../middlewares/createInsightsMiddleware';
+import type { InsightsClient } from '../../types/index.js';
+import type { InsightsEvent } from '../../middlewares/createInsightsMiddleware.js';
 declare type WithInsightsListenerProps = {
     [key: string]: unknown;
     insights: InsightsClient;
diff --git a/node_modules/instantsearch.js/es/lib/insights/listener.js b/node_modules/instantsearch.js/es/lib/insights/listener.js
index 50d8f6d..7cac46b 100644
--- a/node_modules/instantsearch.js/es/lib/insights/listener.js
+++ b/node_modules/instantsearch.js/es/lib/insights/listener.js
@@ -1,7 +1,7 @@
 /** @jsx h */
 import { h } from 'preact';
-import { deserializePayload } from '../utils';
-import { readDataAttributes, hasDataAttributes } from '../../helpers/insights';
+import { deserializePayload } from '../utils/index.js';
+import { readDataAttributes, hasDataAttributes } from '../../helpers/insights.js';
 
 var findInsightsTarget = function findInsightsTarget(startElement, endElement, validator) {
   var element = startElement;
diff --git a/node_modules/instantsearch.js/es/lib/routers/history.d.ts b/node_modules/instantsearch.js/es/lib/routers/history.d.ts
index 2474488..113ff0d 100644
--- a/node_modules/instantsearch.js/es/lib/routers/history.d.ts
+++ b/node_modules/instantsearch.js/es/lib/routers/history.d.ts
@@ -1,5 +1,5 @@
 import qs from 'qs';
-import type { Router, UiState } from '../../types';
+import type { Router, UiState } from '../../types/index.js';
 declare type CreateURL<TRouteState> = (args: {
     qsModule: typeof qs;
     routeState: TRouteState;
diff --git a/node_modules/instantsearch.js/es/lib/routers/history.js b/node_modules/instantsearch.js/es/lib/routers/history.js
index 2ffa921..4ddd2d1 100644
--- a/node_modules/instantsearch.js/es/lib/routers/history.js
+++ b/node_modules/instantsearch.js/es/lib/routers/history.js
@@ -7,7 +7,7 @@ function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _d
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
 import qs from 'qs';
-import { safelyRunOnBrowser } from '../utils';
+import { safelyRunOnBrowser } from '../utils/index.js';
 
 var setWindowTitle = function setWindowTitle(title) {
   if (title) {
diff --git a/node_modules/instantsearch.js/es/lib/routers/index.d.ts b/node_modules/instantsearch.js/es/lib/routers/index.d.ts
index 5742d94..1114f97 100644
--- a/node_modules/instantsearch.js/es/lib/routers/index.d.ts
+++ b/node_modules/instantsearch.js/es/lib/routers/index.d.ts
@@ -1 +1 @@
-export { default as history } from './history';
+export { default as history } from './history.js';
diff --git a/node_modules/instantsearch.js/es/lib/routers/index.js b/node_modules/instantsearch.js/es/lib/routers/index.js
index dfa20c2..1114f97 100644
--- a/node_modules/instantsearch.js/es/lib/routers/index.js
+++ b/node_modules/instantsearch.js/es/lib/routers/index.js
@@ -1 +1 @@
-export { default as history } from './history';
\ No newline at end of file
+export { default as history } from './history.js';
diff --git a/node_modules/instantsearch.js/es/lib/stateMappings/index.d.ts b/node_modules/instantsearch.js/es/lib/stateMappings/index.d.ts
index 8691b83..f0da1f9 100644
--- a/node_modules/instantsearch.js/es/lib/stateMappings/index.d.ts
+++ b/node_modules/instantsearch.js/es/lib/stateMappings/index.d.ts
@@ -1,2 +1,2 @@
-export { default as simple } from './simple';
-export { default as singleIndex } from './singleIndex';
+export { default as simple } from './simple.js';
+export { default as singleIndex } from './singleIndex.js';
diff --git a/node_modules/instantsearch.js/es/lib/stateMappings/index.js b/node_modules/instantsearch.js/es/lib/stateMappings/index.js
index 023945d..f0da1f9 100644
--- a/node_modules/instantsearch.js/es/lib/stateMappings/index.js
+++ b/node_modules/instantsearch.js/es/lib/stateMappings/index.js
@@ -1,2 +1,2 @@
-export { default as simple } from './simple';
-export { default as singleIndex } from './singleIndex';
\ No newline at end of file
+export { default as simple } from './simple.js';
+export { default as singleIndex } from './singleIndex.js';
diff --git a/node_modules/instantsearch.js/es/lib/stateMappings/simple.d.ts b/node_modules/instantsearch.js/es/lib/stateMappings/simple.d.ts
index b459f83..4d65d51 100644
--- a/node_modules/instantsearch.js/es/lib/stateMappings/simple.d.ts
+++ b/node_modules/instantsearch.js/es/lib/stateMappings/simple.d.ts
@@ -1,2 +1,2 @@
-import type { UiState, StateMapping } from '../../types';
+import type { UiState, StateMapping } from '../../types/index.js';
 export default function simpleStateMapping<TUiState extends UiState = UiState>(): StateMapping<TUiState, TUiState>;
diff --git a/node_modules/instantsearch.js/es/lib/stateMappings/singleIndex.d.ts b/node_modules/instantsearch.js/es/lib/stateMappings/singleIndex.d.ts
index 2506c25..bb8d986 100644
--- a/node_modules/instantsearch.js/es/lib/stateMappings/singleIndex.d.ts
+++ b/node_modules/instantsearch.js/es/lib/stateMappings/singleIndex.d.ts
@@ -1,2 +1,2 @@
-import type { StateMapping, UiState } from '../../types';
+import type { StateMapping, UiState } from '../../types/index.js';
 export default function singleIndexStateMapping<TUiState extends UiState = UiState>(indexName: keyof TUiState): StateMapping<TUiState, TUiState[typeof indexName]>;
diff --git a/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.d.ts b/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.d.ts
index d54d7a7..751cf37 100644
--- a/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.d.ts
@@ -1,5 +1,5 @@
-import type { IndexWidget } from '../../widgets/index/index';
-import type { IndexUiState } from '../../types';
+import type { IndexWidget } from '../../widgets/index/index.js';
+import type { IndexUiState } from '../../types/index.js';
 declare type CheckIndexUiStateParams = {
     index: IndexWidget;
     indexUiState: IndexUiState;
diff --git a/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js b/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js
index e9e5beb..050b511 100644
--- a/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js
+++ b/node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js
@@ -18,9 +18,9 @@ function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(
 
 function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
-import capitalize from './capitalize';
-import { warning } from './logger';
-import { keys } from './typedObject'; // Some connectors are responsible for multiple widgets so we need
+import capitalize from './capitalize.js';
+import { warning } from './logger.js';
+import { keys } from './typedObject.js'; // Some connectors are responsible for multiple widgets so we need
 // to map them.
 
 function getWidgetNames(connectorName) {
diff --git a/node_modules/instantsearch.js/es/lib/utils/checkRendering.d.ts b/node_modules/instantsearch.js/es/lib/utils/checkRendering.d.ts
index b92b3ec..92dc9b8 100644
--- a/node_modules/instantsearch.js/es/lib/utils/checkRendering.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/checkRendering.d.ts
@@ -1,3 +1,3 @@
-import type { Renderer } from '../../types/connector';
+import type { Renderer } from '../../types/connector.js';
 declare function checkRendering<TRenderOptions, TWidgetParams>(rendering: Renderer<TRenderOptions, TWidgetParams>, usage: string): void;
 export default checkRendering;
diff --git a/node_modules/instantsearch.js/es/lib/utils/checkRendering.js b/node_modules/instantsearch.js/es/lib/utils/checkRendering.js
index b489b38..0b8994c 100644
--- a/node_modules/instantsearch.js/es/lib/utils/checkRendering.js
+++ b/node_modules/instantsearch.js/es/lib/utils/checkRendering.js
@@ -1,4 +1,4 @@
-import getObjectType from './getObjectType';
+import getObjectType from './getObjectType.js';
 
 function checkRendering(rendering, usage) {
   if (rendering === undefined || typeof rendering !== 'function') {
diff --git a/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.d.ts b/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.d.ts
index 17e1604..bd7bcbc 100644
--- a/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.d.ts
@@ -1,2 +1,2 @@
-import type { HighlightedParts } from '../../types';
+import type { HighlightedParts } from '../../types/index.js';
 export default function concatHighlightedParts(parts: HighlightedParts[]): string;
diff --git a/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js b/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js
index d3581ff..78fd705 100644
--- a/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js
+++ b/node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js
@@ -1,4 +1,4 @@
-import { TAG_REPLACEMENT } from './escape-highlight';
+import { TAG_REPLACEMENT } from './escape-highlight.js';
 export default function concatHighlightedParts(parts) {
   var highlightPreTag = TAG_REPLACEMENT.highlightPreTag,
       highlightPostTag = TAG_REPLACEMENT.highlightPostTag;
diff --git a/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.d.ts b/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.d.ts
index 9245587..a608d62 100644
--- a/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.d.ts
@@ -1,5 +1,5 @@
 import type { AlgoliaSearchHelper } from 'algoliasearch-helper';
-import type { InstantSearch } from '../../types';
+import type { InstantSearch } from '../../types/index.js';
 declare type BuiltInSendEventForFacet = (eventType: string, facetValue: string, eventName?: string) => void;
 declare type CustomSendEventForFacet = (customPayload: any) => void;
 export declare type SendEventForFacet = BuiltInSendEventForFacet & CustomSendEventForFacet;
diff --git a/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.js b/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.js
index 4b4abc7..0af10d7 100644
--- a/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.js
+++ b/node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.js
@@ -1,6 +1,6 @@
 function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
 
-import isFacetRefined from './isFacetRefined';
+import isFacetRefined from './isFacetRefined.js';
 export function createSendEventForFacet(_ref) {
   var instantSearchInstance = _ref.instantSearchInstance,
       helper = _ref.helper,
diff --git a/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.d.ts b/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.d.ts
index e4b756c..3154f16 100644
--- a/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.d.ts
@@ -1,4 +1,4 @@
-import type { InstantSearch, Hit, Hits } from '../../types';
+import type { InstantSearch, Hit, Hits } from '../../types/index.js';
 declare type BuiltInSendEventForHits = (eventType: string, hits: Hit | Hits, eventName?: string) => void;
 declare type CustomSendEventForHits = (customPayload: any) => void;
 export declare type SendEventForHits = BuiltInSendEventForHits & CustomSendEventForHits;
diff --git a/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js b/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js
index a3886ac..ddf9689 100644
--- a/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js
+++ b/node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js
@@ -1,6 +1,6 @@
 function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
 
-import { serializePayload } from '../../lib/utils/serializer';
+import { serializePayload } from '../../lib/utils/serializer.js';
 
 function chunk(arr) {
   var chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
diff --git a/node_modules/instantsearch.js/es/lib/utils/debounce.d.ts b/node_modules/instantsearch.js/es/lib/utils/debounce.d.ts
index 8f8419b..0c19f0f 100644
--- a/node_modules/instantsearch.js/es/lib/utils/debounce.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/debounce.d.ts
@@ -1,4 +1,4 @@
-import type { Awaited } from '../../types';
+import type { Awaited } from '../../types/index.js';
 declare type Func = (...args: any[]) => any;
 export declare type DebouncedFunction<TFunction extends Func> = (this: ThisParameterType<TFunction>, ...args: Parameters<TFunction>) => Promise<Awaited<ReturnType<TFunction>>>;
 export declare function debounce<TFunction extends Func>(func: TFunction, wait: number): DebouncedFunction<TFunction>;
diff --git a/node_modules/instantsearch.js/es/lib/utils/detect-insights-client.js b/node_modules/instantsearch.js/es/lib/utils/detect-insights-client.js
index a151371..a2539e9 100644
--- a/node_modules/instantsearch.js/es/lib/utils/detect-insights-client.js
+++ b/node_modules/instantsearch.js/es/lib/utils/detect-insights-client.js
@@ -1,4 +1,4 @@
-import { safelyRunOnBrowser } from './safelyRunOnBrowser';
+import { safelyRunOnBrowser } from './safelyRunOnBrowser.js';
 export default function hasDetectedInsightsClient() {
   return safelyRunOnBrowser(function (_ref) {
     var window = _ref.window;
diff --git a/node_modules/instantsearch.js/es/lib/utils/escape-highlight.d.ts b/node_modules/instantsearch.js/es/lib/utils/escape-highlight.d.ts
index a8a5566..c0c3f67 100644
--- a/node_modules/instantsearch.js/es/lib/utils/escape-highlight.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/escape-highlight.d.ts
@@ -1,4 +1,4 @@
-import type { Hit, FacetHit, EscapedHits } from '../../types';
+import type { Hit, FacetHit, EscapedHits } from '../../types/index.js';
 export declare const TAG_PLACEHOLDER: {
     highlightPreTag: string;
     highlightPostTag: string;
diff --git a/node_modules/instantsearch.js/es/lib/utils/escape-highlight.js b/node_modules/instantsearch.js/es/lib/utils/escape-highlight.js
index 365b0a3..df6c838 100644
--- a/node_modules/instantsearch.js/es/lib/utils/escape-highlight.js
+++ b/node_modules/instantsearch.js/es/lib/utils/escape-highlight.js
@@ -6,8 +6,8 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import escape from './escape';
-import isPlainObject from './isPlainObject';
+import escape from './escape.js';
+import isPlainObject from './isPlainObject.js';
 export var TAG_PLACEHOLDER = {
   highlightPreTag: '__ais-highlight__',
   highlightPostTag: '__/ais-highlight__'
diff --git a/node_modules/instantsearch.js/es/lib/utils/getContainerNode.js b/node_modules/instantsearch.js/es/lib/utils/getContainerNode.js
index f01e984..11538b5 100644
--- a/node_modules/instantsearch.js/es/lib/utils/getContainerNode.js
+++ b/node_modules/instantsearch.js/es/lib/utils/getContainerNode.js
@@ -1,4 +1,4 @@
-import isDomElement from './isDomElement';
+import isDomElement from './isDomElement.js';
 /**
  * Return the container. If it's a string, it is considered a
  * css selector and retrieves the first matching element. Otherwise
diff --git a/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.d.ts b/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.d.ts
index 96fac57..635d5c5 100644
--- a/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.d.ts
@@ -1,2 +1,2 @@
-import type { HighlightedParts } from '../../types';
+import type { HighlightedParts } from '../../types/index.js';
 export default function getHighlightFromSiblings(parts: HighlightedParts[], i: number): boolean;
diff --git a/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js b/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js
index 21a7201..52c71a5 100644
--- a/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js
+++ b/node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js
@@ -1,4 +1,4 @@
-import unescape from './unescape';
+import unescape from './unescape.js';
 var hasAlphanumeric = new RegExp(/\w/i);
 export default function getHighlightFromSiblings(parts, i) {
   var _parts, _parts2;
diff --git a/node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js b/node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js
index b88c120..317aa9a 100644
--- a/node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js
+++ b/node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js
@@ -1,4 +1,4 @@
-import { TAG_REPLACEMENT } from './escape-highlight';
+import { TAG_REPLACEMENT } from './escape-highlight.js';
 export default function getHighlightedParts(highlightedValue) {
   var highlightPostTag = TAG_REPLACEMENT.highlightPostTag,
       highlightPreTag = TAG_REPLACEMENT.highlightPreTag;
diff --git a/node_modules/instantsearch.js/es/lib/utils/getRefinements.js b/node_modules/instantsearch.js/es/lib/utils/getRefinements.js
index 6a9681a..5544ed1 100644
--- a/node_modules/instantsearch.js/es/lib/utils/getRefinements.js
+++ b/node_modules/instantsearch.js/es/lib/utils/getRefinements.js
@@ -1,5 +1,5 @@
-import find from './find';
-import unescapeRefinement from './unescapeRefinement';
+import find from './find.js';
+import unescapeRefinement from './unescapeRefinement.js';
 
 function getRefinement(state, type, attribute, name) {
   var resultsFacets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
diff --git a/node_modules/instantsearch.js/es/lib/utils/getWidgetAttribute.d.ts b/node_modules/instantsearch.js/es/lib/utils/getWidgetAttribute.d.ts
index 010c218..87ccd2c 100644
--- a/node_modules/instantsearch.js/es/lib/utils/getWidgetAttribute.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/getWidgetAttribute.d.ts
@@ -1,3 +1,3 @@
-import type { InitOptions, Widget } from '../../types';
-import type { IndexWidget } from '../../widgets/index/index';
+import type { InitOptions, Widget } from '../../types/index.js';
+import type { IndexWidget } from '../../widgets/index/index.js';
 export declare function getWidgetAttribute(widget: Widget | IndexWidget, initOptions: InitOptions): string;
diff --git a/node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.d.ts b/node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.d.ts
index b113ef6..9258bf4 100644
--- a/node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.d.ts
@@ -1,4 +1,4 @@
-import type { AlgoliaHit } from '../../types';
+import type { AlgoliaHit } from '../../types/index.js';
 export declare function addAbsolutePosition<THit extends AlgoliaHit>(hits: THit[], page: number, hitsPerPage: number): Array<THit & {
     __position: number;
 }>;
diff --git a/node_modules/instantsearch.js/es/lib/utils/hits-query-id.d.ts b/node_modules/instantsearch.js/es/lib/utils/hits-query-id.d.ts
index ccbe211..6521424 100644
--- a/node_modules/instantsearch.js/es/lib/utils/hits-query-id.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/hits-query-id.d.ts
@@ -1,4 +1,4 @@
-import type { AlgoliaHit } from '../../types';
+import type { AlgoliaHit } from '../../types/index.js';
 export declare function addQueryID<THit extends AlgoliaHit>(hits: THit[], queryID?: string): Array<THit & {
     __queryID?: string;
 }>;
diff --git a/node_modules/instantsearch.js/es/lib/utils/index.d.ts b/node_modules/instantsearch.js/es/lib/utils/index.d.ts
index 47f0817..a0c11c5 100644
--- a/node_modules/instantsearch.js/es/lib/utils/index.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/index.d.ts
@@ -1,48 +1,48 @@
-export { default as capitalize } from './capitalize';
-export { default as defer } from './defer';
-export { default as isDomElement } from './isDomElement';
-export { default as getContainerNode } from './getContainerNode';
-export { default as isSpecialClick } from './isSpecialClick';
-export { default as prepareTemplateProps } from './prepareTemplateProps';
-export { default as renderTemplate } from './renderTemplate';
-export { default as getRefinements } from './getRefinements';
-export { default as clearRefinements } from './clearRefinements';
-export { default as escapeRefinement } from './escapeRefinement';
-export { default as unescapeRefinement } from './unescapeRefinement';
-export { default as checkRendering } from './checkRendering';
-export { checkIndexUiState } from './checkIndexUiState';
-export { default as getPropertyByPath } from './getPropertyByPath';
-export { default as getObjectType } from './getObjectType';
-export { default as noop } from './noop';
-export { default as isFiniteNumber } from './isFiniteNumber';
-export { default as isPlainObject } from './isPlainObject';
-export { default as uniq } from './uniq';
-export { default as range } from './range';
-export { default as isEqual } from './isEqual';
-export { default as escape } from './escape';
-export { default as unescape } from './unescape';
-export { default as concatHighlightedParts } from './concatHighlightedParts';
-export { default as getHighlightedParts } from './getHighlightedParts';
-export { default as getHighlightFromSiblings } from './getHighlightFromSiblings';
-export { default as reverseHighlightedParts } from './reverseHighlightedParts';
-export { default as find } from './find';
-export { default as findIndex } from './findIndex';
-export { default as mergeSearchParameters } from './mergeSearchParameters';
-export { default as resolveSearchParameters } from './resolveSearchParameters';
-export { default as toArray } from './toArray';
-export { warning, deprecate } from './logger';
-export { escapeHits, TAG_PLACEHOLDER, TAG_REPLACEMENT, escapeFacets, } from './escape-highlight';
-export { createDocumentationLink, createDocumentationMessageGenerator, } from './documentation';
-export { aroundLatLngToPosition, insideBoundingBoxToBoundingBox, } from './geo-search';
-export { addAbsolutePosition } from './hits-absolute-position';
-export { addQueryID } from './hits-query-id';
-export { default as isFacetRefined } from './isFacetRefined';
-export * from './createSendEventForFacet';
-export * from './createSendEventForHits';
-export { getAppIdAndApiKey } from './getAppIdAndApiKey';
-export { convertNumericRefinementsToFilters } from './convertNumericRefinementsToFilters';
-export { createConcurrentSafePromise } from './createConcurrentSafePromise';
-export { debounce } from './debounce';
-export { serializePayload, deserializePayload } from './serializer';
-export { getWidgetAttribute } from './getWidgetAttribute';
-export { safelyRunOnBrowser } from './safelyRunOnBrowser';
+export { default as capitalize } from './capitalize.js';
+export { default as defer } from './defer.js';
+export { default as isDomElement } from './isDomElement.js';
+export { default as getContainerNode } from './getContainerNode.js';
+export { default as isSpecialClick } from './isSpecialClick.js';
+export { default as prepareTemplateProps } from './prepareTemplateProps.js';
+export { default as renderTemplate } from './renderTemplate.js';
+export { default as getRefinements } from './getRefinements.js';
+export { default as clearRefinements } from './clearRefinements.js';
+export { default as escapeRefinement } from './escapeRefinement.js';
+export { default as unescapeRefinement } from './unescapeRefinement.js';
+export { default as checkRendering } from './checkRendering.js';
+export { checkIndexUiState } from './checkIndexUiState.js';
+export { default as getPropertyByPath } from './getPropertyByPath.js';
+export { default as getObjectType } from './getObjectType.js';
+export { default as noop } from './noop.js';
+export { default as isFiniteNumber } from './isFiniteNumber.js';
+export { default as isPlainObject } from './isPlainObject.js';
+export { default as uniq } from './uniq.js';
+export { default as range } from './range.js';
+export { default as isEqual } from './isEqual.js';
+export { default as escape } from './escape.js';
+export { default as unescape } from './unescape.js';
+export { default as concatHighlightedParts } from './concatHighlightedParts.js';
+export { default as getHighlightedParts } from './getHighlightedParts.js';
+export { default as getHighlightFromSiblings } from './getHighlightFromSiblings.js';
+export { default as reverseHighlightedParts } from './reverseHighlightedParts.js';
+export { default as find } from './find.js';
+export { default as findIndex } from './findIndex.js';
+export { default as mergeSearchParameters } from './mergeSearchParameters.js';
+export { default as resolveSearchParameters } from './resolveSearchParameters.js';
+export { default as toArray } from './toArray.js';
+export { warning, deprecate } from './logger.js';
+export { escapeHits, TAG_PLACEHOLDER, TAG_REPLACEMENT, escapeFacets, } from './escape-highlight.js';
+export { createDocumentationLink, createDocumentationMessageGenerator, } from './documentation.js';
+export { aroundLatLngToPosition, insideBoundingBoxToBoundingBox, } from './geo-search.js';
+export { addAbsolutePosition } from './hits-absolute-position.js';
+export { addQueryID } from './hits-query-id.js';
+export { default as isFacetRefined } from './isFacetRefined.js';
+export * from './createSendEventForFacet.js';
+export * from './createSendEventForHits.js';
+export { getAppIdAndApiKey } from './getAppIdAndApiKey.js';
+export { convertNumericRefinementsToFilters } from './convertNumericRefinementsToFilters.js';
+export { createConcurrentSafePromise } from './createConcurrentSafePromise.js';
+export { debounce } from './debounce.js';
+export { serializePayload, deserializePayload } from './serializer.js';
+export { getWidgetAttribute } from './getWidgetAttribute.js';
+export { safelyRunOnBrowser } from './safelyRunOnBrowser.js';
diff --git a/node_modules/instantsearch.js/es/lib/utils/index.js b/node_modules/instantsearch.js/es/lib/utils/index.js
index cbb742d..827f132 100644
--- a/node_modules/instantsearch.js/es/lib/utils/index.js
+++ b/node_modules/instantsearch.js/es/lib/utils/index.js
@@ -1,48 +1,48 @@
-export { default as capitalize } from './capitalize';
-export { default as defer } from './defer';
-export { default as isDomElement } from './isDomElement';
-export { default as getContainerNode } from './getContainerNode';
-export { default as isSpecialClick } from './isSpecialClick';
-export { default as prepareTemplateProps } from './prepareTemplateProps';
-export { default as renderTemplate } from './renderTemplate';
-export { default as getRefinements } from './getRefinements';
-export { default as clearRefinements } from './clearRefinements';
-export { default as escapeRefinement } from './escapeRefinement';
-export { default as unescapeRefinement } from './unescapeRefinement';
-export { default as checkRendering } from './checkRendering';
-export { checkIndexUiState } from './checkIndexUiState';
-export { default as getPropertyByPath } from './getPropertyByPath';
-export { default as getObjectType } from './getObjectType';
-export { default as noop } from './noop';
-export { default as isFiniteNumber } from './isFiniteNumber';
-export { default as isPlainObject } from './isPlainObject';
-export { default as uniq } from './uniq';
-export { default as range } from './range';
-export { default as isEqual } from './isEqual';
-export { default as escape } from './escape';
-export { default as unescape } from './unescape';
-export { default as concatHighlightedParts } from './concatHighlightedParts';
-export { default as getHighlightedParts } from './getHighlightedParts';
-export { default as getHighlightFromSiblings } from './getHighlightFromSiblings';
-export { default as reverseHighlightedParts } from './reverseHighlightedParts';
-export { default as find } from './find';
-export { default as findIndex } from './findIndex';
-export { default as mergeSearchParameters } from './mergeSearchParameters';
-export { default as resolveSearchParameters } from './resolveSearchParameters';
-export { default as toArray } from './toArray';
-export { warning, deprecate } from './logger';
-export { escapeHits, TAG_PLACEHOLDER, TAG_REPLACEMENT, escapeFacets } from './escape-highlight';
-export { createDocumentationLink, createDocumentationMessageGenerator } from './documentation';
-export { aroundLatLngToPosition, insideBoundingBoxToBoundingBox } from './geo-search';
-export { addAbsolutePosition } from './hits-absolute-position';
-export { addQueryID } from './hits-query-id';
-export { default as isFacetRefined } from './isFacetRefined';
-export * from './createSendEventForFacet';
-export * from './createSendEventForHits';
-export { getAppIdAndApiKey } from './getAppIdAndApiKey';
-export { convertNumericRefinementsToFilters } from './convertNumericRefinementsToFilters';
-export { createConcurrentSafePromise } from './createConcurrentSafePromise';
-export { debounce } from './debounce';
-export { serializePayload, deserializePayload } from './serializer';
-export { getWidgetAttribute } from './getWidgetAttribute';
-export { safelyRunOnBrowser } from './safelyRunOnBrowser';
\ No newline at end of file
+export { default as capitalize } from './capitalize.js';
+export { default as defer } from './defer.js';
+export { default as isDomElement } from './isDomElement.js';
+export { default as getContainerNode } from './getContainerNode.js';
+export { default as isSpecialClick } from './isSpecialClick.js';
+export { default as prepareTemplateProps } from './prepareTemplateProps.js';
+export { default as renderTemplate } from './renderTemplate.js';
+export { default as getRefinements } from './getRefinements.js';
+export { default as clearRefinements } from './clearRefinements.js';
+export { default as escapeRefinement } from './escapeRefinement.js';
+export { default as unescapeRefinement } from './unescapeRefinement.js';
+export { default as checkRendering } from './checkRendering.js';
+export { checkIndexUiState } from './checkIndexUiState.js';
+export { default as getPropertyByPath } from './getPropertyByPath.js';
+export { default as getObjectType } from './getObjectType.js';
+export { default as noop } from './noop.js';
+export { default as isFiniteNumber } from './isFiniteNumber.js';
+export { default as isPlainObject } from './isPlainObject.js';
+export { default as uniq } from './uniq.js';
+export { default as range } from './range.js';
+export { default as isEqual } from './isEqual.js';
+export { default as escape } from './escape.js';
+export { default as unescape } from './unescape.js';
+export { default as concatHighlightedParts } from './concatHighlightedParts.js';
+export { default as getHighlightedParts } from './getHighlightedParts.js';
+export { default as getHighlightFromSiblings } from './getHighlightFromSiblings.js';
+export { default as reverseHighlightedParts } from './reverseHighlightedParts.js';
+export { default as find } from './find.js';
+export { default as findIndex } from './findIndex.js';
+export { default as mergeSearchParameters } from './mergeSearchParameters.js';
+export { default as resolveSearchParameters } from './resolveSearchParameters.js';
+export { default as toArray } from './toArray.js';
+export { warning, deprecate } from './logger.js';
+export { escapeHits, TAG_PLACEHOLDER, TAG_REPLACEMENT, escapeFacets } from './escape-highlight.js';
+export { createDocumentationLink, createDocumentationMessageGenerator } from './documentation.js';
+export { aroundLatLngToPosition, insideBoundingBoxToBoundingBox } from './geo-search.js';
+export { addAbsolutePosition } from './hits-absolute-position.js';
+export { addQueryID } from './hits-query-id.js';
+export { default as isFacetRefined } from './isFacetRefined.js';
+export * from './createSendEventForFacet.js';
+export * from './createSendEventForHits.js';
+export { getAppIdAndApiKey } from './getAppIdAndApiKey.js';
+export { convertNumericRefinementsToFilters } from './convertNumericRefinementsToFilters.js';
+export { createConcurrentSafePromise } from './createConcurrentSafePromise.js';
+export { debounce } from './debounce.js';
+export { serializePayload, deserializePayload } from './serializer.js';
+export { getWidgetAttribute } from './getWidgetAttribute.js';
+export { safelyRunOnBrowser } from './safelyRunOnBrowser.js';
diff --git a/node_modules/instantsearch.js/es/lib/utils/logger.js b/node_modules/instantsearch.js/es/lib/utils/logger.js
index 96cc2fd..ec571c1 100644
--- a/node_modules/instantsearch.js/es/lib/utils/logger.js
+++ b/node_modules/instantsearch.js/es/lib/utils/logger.js
@@ -1,4 +1,4 @@
-import noop from './noop';
+import noop from './noop.js';
 
 /**
  * Logs a warning when this function is called, in development environment only.
diff --git a/node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js b/node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js
index e5897f9..079a919 100644
--- a/node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js
+++ b/node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js
@@ -8,8 +8,8 @@ function _objectWithoutProperties(source, excluded) { if (source == null) return
 
 function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
 
-import findIndex from './findIndex';
-import uniq from './uniq';
+import findIndex from './findIndex.js';
+import uniq from './uniq.js';
 
 var mergeWithRest = function mergeWithRest(left, right) {
   var facets = right.facets,
diff --git a/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.d.ts b/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.d.ts
index 1123d66..1a09bdc 100644
--- a/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.d.ts
@@ -1,4 +1,4 @@
-import type { HoganHelpers, Templates } from '../../types';
+import type { HoganHelpers, Templates } from '../../types/index.js';
 import type { HoganOptions } from 'hogan.js';
 declare type TemplatesConfig = {
     helpers?: HoganHelpers;
diff --git a/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.js b/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.js
index ba4d6e4..e404114 100644
--- a/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.js
+++ b/node_modules/instantsearch.js/es/lib/utils/prepareTemplateProps.js
@@ -16,7 +16,7 @@ function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToAr
 
 function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
 
-import uniq from './uniq';
+import uniq from './uniq.js';
 
 function prepareTemplates( // can not use = {} here, since the template could have different constraints
 defaultTemplates) {
diff --git a/node_modules/instantsearch.js/es/lib/utils/renderTemplate.d.ts b/node_modules/instantsearch.js/es/lib/utils/renderTemplate.d.ts
index cfedb8c..4345400 100644
--- a/node_modules/instantsearch.js/es/lib/utils/renderTemplate.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/renderTemplate.d.ts
@@ -1,6 +1,6 @@
 import type { HoganOptions } from 'hogan.js';
-import type { Templates, HoganHelpers } from '../../types';
-import type { BindEventForHits } from './createSendEventForHits';
+import type { Templates, HoganHelpers } from '../../types/index.js';
+import type { BindEventForHits } from './createSendEventForHits.js';
 declare function renderTemplate({ templates, templateKey, compileOptions, helpers, data, bindEvent, }: {
     templates: Templates;
     templateKey: string;
diff --git a/node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.d.ts b/node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.d.ts
index 87c6795..5d1bbdc 100644
--- a/node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.d.ts
@@ -1,4 +1,4 @@
 import type { SearchParameters } from 'algoliasearch-helper';
-import type { IndexWidget } from '../../widgets/index/index';
+import type { IndexWidget } from '../../widgets/index/index.js';
 declare const resolveSearchParameters: (current: IndexWidget) => SearchParameters[];
 export default resolveSearchParameters;
diff --git a/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.d.ts b/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.d.ts
index b034bf1..c79a418 100644
--- a/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.d.ts
+++ b/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.d.ts
@@ -1,4 +1,4 @@
-import type { HighlightedParts } from '../../types';
+import type { HighlightedParts } from '../../types/index.js';
 export default function reverseHighlightedParts(parts: HighlightedParts[]): {
     isHighlighted: boolean;
     value: string;
diff --git a/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js b/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js
index 8b8c0cd..7fdc375 100644
--- a/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js
+++ b/node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import getHighlightFromSiblings from './getHighlightFromSiblings';
+import getHighlightFromSiblings from './getHighlightFromSiblings.js';
 export default function reverseHighlightedParts(parts) {
   if (!parts.some(function (part) {
     return part.isHighlighted;
diff --git a/node_modules/instantsearch.js/es/lib/voiceSearchHelper/index.d.ts b/node_modules/instantsearch.js/es/lib/voiceSearchHelper/index.d.ts
index cc22dc0..e36ce08 100644
--- a/node_modules/instantsearch.js/es/lib/voiceSearchHelper/index.d.ts
+++ b/node_modules/instantsearch.js/es/lib/voiceSearchHelper/index.d.ts
@@ -1,3 +1,3 @@
-import type { CreateVoiceSearchHelper } from './types';
+import type { CreateVoiceSearchHelper } from './types/index.js';
 declare const createVoiceSearchHelper: CreateVoiceSearchHelper;
 export default createVoiceSearchHelper;
diff --git a/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.d.ts b/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.d.ts
index 04e0ff2..c898d74 100644
--- a/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.d.ts
+++ b/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.d.ts
@@ -1,4 +1,4 @@
-import type { InsightsClient, InsightsClientMethod, InternalMiddleware, Hit } from '../types';
+import type { InsightsClient, InsightsClientMethod, InternalMiddleware, Hit } from '../types/index.js';
 export declare type InsightsEvent = {
     insightsMethod?: InsightsClientMethod;
     payload: any;
diff --git a/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js b/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js
index 390f3df..42906f2 100644
--- a/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js
+++ b/node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js
@@ -16,9 +16,9 @@ function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(
 
 function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
-import { getInsightsAnonymousUserTokenInternal } from '../helpers';
-import { warning, noop, getAppIdAndApiKey, find } from '../lib/utils';
-import connectConfigure from '../connectors/configure/connectConfigure';
+import { getInsightsAnonymousUserTokenInternal } from '../helpers/index.js';
+import { warning, noop, getAppIdAndApiKey, find } from '../lib/utils/index.js';
+import connectConfigure from '../connectors/configure/connectConfigure.js';
 export var createInsightsMiddleware = function createInsightsMiddleware(props) {
   var _ref = props || {},
       _insightsClient = _ref.insightsClient,
diff --git a/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.d.ts b/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.d.ts
index 3e472ea..dffe9c3 100644
--- a/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.d.ts
+++ b/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.d.ts
@@ -1,4 +1,4 @@
-import type { InternalMiddleware } from '../types';
+import type { InternalMiddleware } from '../types/index.js';
 export declare function isMetadataEnabled(): boolean;
 /**
  * Exposes the metadata of mounted widgets in a custom
diff --git a/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js b/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js
index 28b43cc..a00c7ca 100644
--- a/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js
+++ b/node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js
@@ -1,4 +1,4 @@
-import { safelyRunOnBrowser } from '../lib/utils';
+import { safelyRunOnBrowser } from '../lib/utils/index.js';
 
 function extractPayload(widgets, instantSearchInstance, payload) {
   var parent = instantSearchInstance.mainIndex;
diff --git a/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.d.ts b/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.d.ts
index 071084d..a907e26 100644
--- a/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.d.ts
+++ b/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.d.ts
@@ -1,4 +1,4 @@
-import type { Router, StateMapping, UiState, InternalMiddleware } from '../types';
+import type { Router, StateMapping, UiState, InternalMiddleware } from '../types/index.js';
 export declare type RouterProps<TUiState extends UiState = UiState, TRouteState = TUiState> = {
     router?: Router<TRouteState>;
     stateMapping?: StateMapping<TUiState, TRouteState>;
diff --git a/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js b/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js
index fd0daf0..e392bc9 100644
--- a/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js
+++ b/node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js
@@ -4,9 +4,9 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import simpleStateMapping from '../lib/stateMappings/simple';
-import historyRouter from '../lib/routers/history';
-import { isEqual } from '../lib/utils';
+import simpleStateMapping from '../lib/stateMappings/simple.js';
+import historyRouter from '../lib/routers/history.js';
+import { isEqual } from '../lib/utils/index.js';
 export var createRouterMiddleware = function createRouterMiddleware() {
   var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
   var _props$router = props.router,
diff --git a/node_modules/instantsearch.js/es/middlewares/index.d.ts b/node_modules/instantsearch.js/es/middlewares/index.d.ts
index a44215a..b36ef8d 100644
--- a/node_modules/instantsearch.js/es/middlewares/index.d.ts
+++ b/node_modules/instantsearch.js/es/middlewares/index.d.ts
@@ -1,3 +1,3 @@
-export * from './createInsightsMiddleware';
-export * from './createRouterMiddleware';
-export * from './createMetadataMiddleware';
+export * from './createInsightsMiddleware.js';
+export * from './createRouterMiddleware.js';
+export * from './createMetadataMiddleware.js';
diff --git a/node_modules/instantsearch.js/es/middlewares/index.js b/node_modules/instantsearch.js/es/middlewares/index.js
index e18bc64..b36ef8d 100644
--- a/node_modules/instantsearch.js/es/middlewares/index.js
+++ b/node_modules/instantsearch.js/es/middlewares/index.js
@@ -1,3 +1,3 @@
-export * from './createInsightsMiddleware';
-export * from './createRouterMiddleware';
-export * from './createMetadataMiddleware';
\ No newline at end of file
+export * from './createInsightsMiddleware.js';
+export * from './createRouterMiddleware.js';
+export * from './createMetadataMiddleware.js';
diff --git a/node_modules/instantsearch.js/es/package.json b/node_modules/instantsearch.js/es/package.json
new file mode 100644
index 0000000..3dbc1ca
--- /dev/null
+++ b/node_modules/instantsearch.js/es/package.json
@@ -0,0 +1,3 @@
+{
+  "type": "module"
+}
diff --git a/node_modules/instantsearch.js/es/types/connector.d.ts b/node_modules/instantsearch.js/es/types/connector.d.ts
index af71ab9..2bba761 100644
--- a/node_modules/instantsearch.js/es/types/connector.d.ts
+++ b/node_modules/instantsearch.js/es/types/connector.d.ts
@@ -1,8 +1,8 @@
 import type { SearchResults } from 'algoliasearch-helper';
-import type { InstantSearch } from './instantsearch';
-import type { InsightsClient } from './insights';
-import type { Hits } from './results';
-import type { UnknownWidgetParams, Widget, WidgetDescription } from './widget';
+import type { InstantSearch } from './instantsearch.js';
+import type { InsightsClient } from './insights.js';
+import type { Hits } from './results.js';
+import type { UnknownWidgetParams, Widget, WidgetDescription } from './widget.js';
 /**
  * The base renderer options. All render functions receive
  * the options below plus the specific options per connector.
diff --git a/node_modules/instantsearch.js/es/types/index.d.ts b/node_modules/instantsearch.js/es/types/index.d.ts
index e71acf8..ba4b8b0 100644
--- a/node_modules/instantsearch.js/es/types/index.d.ts
+++ b/node_modules/instantsearch.js/es/types/index.d.ts
@@ -1,14 +1,14 @@
-export * from './utils';
-export * from './algoliasearch';
-export * from './results';
-export * from './component';
-export * from './instantsearch';
-export * from './middleware';
-export * from './router';
-export * from './insights';
-export * from './connector';
-export * from './widget-factory';
-export * from './widget';
-export * from './ui-state';
-export * from './render-state';
-export * from './templates';
+export * from './utils/index.js';
+export * from './algoliasearch.js';
+export * from './results.js';
+export * from './component.js';
+export * from './instantsearch.js';
+export * from './middleware.js';
+export * from './router.js';
+export * from './insights.js';
+export * from './connector.js';
+export * from './widget-factory.js';
+export * from './widget.js';
+export * from './ui-state.js';
+export * from './render-state.js';
+export * from './templates.js';
diff --git a/node_modules/instantsearch.js/es/types/index.js b/node_modules/instantsearch.js/es/types/index.js
index 8679b88..0a0a075 100644
--- a/node_modules/instantsearch.js/es/types/index.js
+++ b/node_modules/instantsearch.js/es/types/index.js
@@ -1,19 +1,19 @@
 // internal
-export * from './utils'; // Algolia-related
+export * from './utils.js'; // Algolia-related
 
-export * from './algoliasearch';
-export * from './results'; // component-related
+export * from './algoliasearch.js';
+export * from './results.js'; // component-related
 
-export * from './component'; // instantsearch-related
+export * from './component.js'; // instantsearch-related
 
-export * from './instantsearch';
-export * from './middleware';
-export * from './router';
-export * from './insights'; // widget-related
+export * from './instantsearch.js';
+export * from './middleware.js';
+export * from './router.js';
+export * from './insights.js'; // widget-related
 
-export * from './connector';
-export * from './widget-factory';
-export * from './widget';
-export * from './ui-state';
-export * from './render-state';
-export * from './templates';
\ No newline at end of file
+export * from './connector.js';
+export * from './widget-factory.js';
+export * from './widget.js';
+export * from './ui-state.js';
+export * from './render-state.js';
+export * from './templates.js';
diff --git a/node_modules/instantsearch.js/es/types/instantsearch.d.ts b/node_modules/instantsearch.js/es/types/instantsearch.d.ts
index b05e811..5cd0e7d 100644
--- a/node_modules/instantsearch.js/es/types/instantsearch.d.ts
+++ b/node_modules/instantsearch.js/es/types/instantsearch.d.ts
@@ -1 +1 @@
-export type { default as InstantSearch, InstantSearchOptions, } from '../lib/InstantSearch';
+export type { default as InstantSearch, InstantSearchOptions, } from '../lib/InstantSearch.js';
diff --git a/node_modules/instantsearch.js/es/types/middleware.d.ts b/node_modules/instantsearch.js/es/types/middleware.d.ts
index f248d33..c782be9 100644
--- a/node_modules/instantsearch.js/es/types/middleware.d.ts
+++ b/node_modules/instantsearch.js/es/types/middleware.d.ts
@@ -1,6 +1,6 @@
-import type InstantSearch from '../lib/InstantSearch';
-import type { UiState } from './ui-state';
-import type { AtLeastOne } from './utils';
+import type InstantSearch from '../lib/InstantSearch.js';
+import type { UiState } from './ui-state.js';
+import type { AtLeastOne } from './utils/index.js';
 export declare type MiddlewareDefinition<TUiState extends UiState = UiState> = {
     onStateChange(options: {
         uiState: TUiState;
diff --git a/node_modules/instantsearch.js/es/types/render-state.d.ts b/node_modules/instantsearch.js/es/types/render-state.d.ts
index e2289c0..cc3a86c 100644
--- a/node_modules/instantsearch.js/es/types/render-state.d.ts
+++ b/node_modules/instantsearch.js/es/types/render-state.d.ts
@@ -1,30 +1,30 @@
-import type { AnswersWidgetDescription } from '../connectors/answers/connectAnswers';
-import type { AutocompleteWidgetDescription } from '../connectors/autocomplete/connectAutocomplete';
-import type { BreadcrumbWidgetDescription } from '../connectors/breadcrumb/connectBreadcrumb';
-import type { ClearRefinementsWidgetDescription } from '../connectors/clear-refinements/connectClearRefinements';
-import type { ConfigureWidgetDescription } from '../connectors/configure/connectConfigure';
-import type { CurrentRefinementsWidgetDescription } from '../connectors/current-refinements/connectCurrentRefinements';
-import type { GeoSearchWidgetDescription } from '../connectors/geo-search/connectGeoSearch';
-import type { HierarchicalMenuWidgetDescription } from '../connectors/hierarchical-menu/connectHierarchicalMenu';
-import type { HitsPerPageWidgetDescription } from '../connectors/hits-per-page/connectHitsPerPage';
-import type { HitsWidgetDescription } from '../connectors/hits/connectHits';
-import type { InfiniteHitsWidgetDescription } from '../connectors/infinite-hits/connectInfiniteHits';
-import type { MenuWidgetDescription } from '../connectors/menu/connectMenu';
-import type { NumericMenuWidgetDescription } from '../connectors/numeric-menu/connectNumericMenu';
-import type { PaginationWidgetDescription } from '../connectors/pagination/connectPagination';
-import type { PoweredByWidgetDescription } from '../connectors/powered-by/connectPoweredBy';
-import type { QueryRulesWidgetDescription } from '../connectors/query-rules/connectQueryRules';
-import type { RangeWidgetDescription } from '../connectors/range/connectRange';
-import type { RatingMenuWidgetDescription } from '../connectors/rating-menu/connectRatingMenu';
-import type { RefinementListWidgetDescription } from '../connectors/refinement-list/connectRefinementList';
-import type { RelevantSortWidgetDescription } from '../connectors/relevant-sort/connectRelevantSort';
-import type { SearchBoxWidgetDescription } from '../connectors/search-box/connectSearchBox';
-import type { SortByWidgetDescription } from '../connectors/sort-by/connectSortBy';
-import type { StatsWidgetDescription } from '../connectors/stats/connectStats';
-import type { ToggleRefinementWidgetDescription } from '../connectors/toggle-refinement/connectToggleRefinement';
-import type { VoiceSearchWidgetDescription } from '../connectors/voice-search/connectVoiceSearch';
-import type { AnalyticsWidgetDescription } from '../widgets/analytics/analytics';
-import type { PlacesWidgetDescription } from '../widgets/places/places';
+import type { AnswersWidgetDescription } from '../connectors/answers/connectAnswers.js';
+import type { AutocompleteWidgetDescription } from '../connectors/autocomplete/connectAutocomplete.js';
+import type { BreadcrumbWidgetDescription } from '../connectors/breadcrumb/connectBreadcrumb.js';
+import type { ClearRefinementsWidgetDescription } from '../connectors/clear-refinements/connectClearRefinements.js';
+import type { ConfigureWidgetDescription } from '../connectors/configure/connectConfigure.js';
+import type { CurrentRefinementsWidgetDescription } from '../connectors/current-refinements/connectCurrentRefinements.js';
+import type { GeoSearchWidgetDescription } from '../connectors/geo-search/connectGeoSearch.js';
+import type { HierarchicalMenuWidgetDescription } from '../connectors/hierarchical-menu/connectHierarchicalMenu.js';
+import type { HitsPerPageWidgetDescription } from '../connectors/hits-per-page/connectHitsPerPage.js';
+import type { HitsWidgetDescription } from '../connectors/hits/connectHits.js';
+import type { InfiniteHitsWidgetDescription } from '../connectors/infinite-hits/connectInfiniteHits.js';
+import type { MenuWidgetDescription } from '../connectors/menu/connectMenu.js';
+import type { NumericMenuWidgetDescription } from '../connectors/numeric-menu/connectNumericMenu.js';
+import type { PaginationWidgetDescription } from '../connectors/pagination/connectPagination.js';
+import type { PoweredByWidgetDescription } from '../connectors/powered-by/connectPoweredBy.js';
+import type { QueryRulesWidgetDescription } from '../connectors/query-rules/connectQueryRules.js';
+import type { RangeWidgetDescription } from '../connectors/range/connectRange.js';
+import type { RatingMenuWidgetDescription } from '../connectors/rating-menu/connectRatingMenu.js';
+import type { RefinementListWidgetDescription } from '../connectors/refinement-list/connectRefinementList.js';
+import type { RelevantSortWidgetDescription } from '../connectors/relevant-sort/connectRelevantSort.js';
+import type { SearchBoxWidgetDescription } from '../connectors/search-box/connectSearchBox.js';
+import type { SortByWidgetDescription } from '../connectors/sort-by/connectSortBy.js';
+import type { StatsWidgetDescription } from '../connectors/stats/connectStats.js';
+import type { ToggleRefinementWidgetDescription } from '../connectors/toggle-refinement/connectToggleRefinement.js';
+import type { VoiceSearchWidgetDescription } from '../connectors/voice-search/connectVoiceSearch.js';
+import type { AnalyticsWidgetDescription } from '../widgets/analytics/analytics.js';
+import type { PlacesWidgetDescription } from '../widgets/places/places.js';
 declare type ConnectorRenderStates = AnswersWidgetDescription['indexRenderState'] & AutocompleteWidgetDescription['indexRenderState'] & BreadcrumbWidgetDescription['indexRenderState'] & ClearRefinementsWidgetDescription['indexRenderState'] & ConfigureWidgetDescription['indexRenderState'] & CurrentRefinementsWidgetDescription['indexRenderState'] & GeoSearchWidgetDescription['indexRenderState'] & HierarchicalMenuWidgetDescription['indexRenderState'] & HitsWidgetDescription['indexRenderState'] & HitsPerPageWidgetDescription['indexRenderState'] & InfiniteHitsWidgetDescription['indexRenderState'] & MenuWidgetDescription['indexRenderState'] & NumericMenuWidgetDescription['indexRenderState'] & PaginationWidgetDescription['indexRenderState'] & PoweredByWidgetDescription['indexRenderState'] & QueryRulesWidgetDescription['indexRenderState'] & RangeWidgetDescription['indexRenderState'] & RatingMenuWidgetDescription['indexRenderState'] & RefinementListWidgetDescription['indexRenderState'] & RelevantSortWidgetDescription['indexRenderState'] & SearchBoxWidgetDescription['indexRenderState'] & SortByWidgetDescription['indexRenderState'] & StatsWidgetDescription['indexRenderState'] & ToggleRefinementWidgetDescription['indexRenderState'] & VoiceSearchWidgetDescription['indexRenderState'];
 declare type WidgetRenderStates = AnalyticsWidgetDescription['indexRenderState'] & PlacesWidgetDescription['indexRenderState'];
 export declare type IndexRenderState = Partial<ConnectorRenderStates & WidgetRenderStates>;
diff --git a/node_modules/instantsearch.js/es/types/router.d.ts b/node_modules/instantsearch.js/es/types/router.d.ts
index 730032f..4275e34 100644
--- a/node_modules/instantsearch.js/es/types/router.d.ts
+++ b/node_modules/instantsearch.js/es/types/router.d.ts
@@ -1,4 +1,4 @@
-import type { UiState } from './ui-state';
+import type { UiState } from './ui-state.js';
 /**
  * The router is the part that saves and reads the object from the storage.
  * Usually this is the URL.
diff --git a/node_modules/instantsearch.js/es/types/templates.d.ts b/node_modules/instantsearch.js/es/types/templates.d.ts
index 98d9fcc..96e703c 100644
--- a/node_modules/instantsearch.js/es/types/templates.d.ts
+++ b/node_modules/instantsearch.js/es/types/templates.d.ts
@@ -1,4 +1,4 @@
-import type { BindEventForHits } from '../lib/utils';
+import type { BindEventForHits } from '../lib/utils/index.js';
 export declare type Template<TTemplateData = void> = string | ((data: TTemplateData) => string);
 export declare type TemplateWithBindEvent<TTemplateData = void> = string | ((data: TTemplateData, bindEvent: BindEventForHits) => string);
 export declare type Templates = {
diff --git a/node_modules/instantsearch.js/es/types/ui-state.d.ts b/node_modules/instantsearch.js/es/types/ui-state.d.ts
index 4f2f873..cd1b573 100644
--- a/node_modules/instantsearch.js/es/types/ui-state.d.ts
+++ b/node_modules/instantsearch.js/es/types/ui-state.d.ts
@@ -1,21 +1,21 @@
-import type { AutocompleteWidgetDescription } from '../connectors/autocomplete/connectAutocomplete';
-import type { ConfigureWidgetDescription } from '../connectors/configure/connectConfigure';
-import type { GeoSearchWidgetDescription } from '../connectors/geo-search/connectGeoSearch';
-import type { HierarchicalMenuWidgetDescription } from '../connectors/hierarchical-menu/connectHierarchicalMenu';
-import type { HitsPerPageWidgetDescription } from '../connectors/hits-per-page/connectHitsPerPage';
-import type { InfiniteHitsWidgetDescription } from '../connectors/infinite-hits/connectInfiniteHits';
-import type { MenuWidgetDescription } from '../connectors/menu/connectMenu';
-import type { NumericMenuWidgetDescription } from '../connectors/numeric-menu/connectNumericMenu';
-import type { PaginationWidgetDescription } from '../connectors/pagination/connectPagination';
-import type { RangeWidgetDescription } from '../connectors/range/connectRange';
-import type { RatingMenuWidgetDescription } from '../connectors/rating-menu/connectRatingMenu';
-import type { RefinementListWidgetDescription } from '../connectors/refinement-list/connectRefinementList';
-import type { RelevantSortWidgetDescription } from '../connectors/relevant-sort/connectRelevantSort';
-import type { SearchBoxWidgetDescription } from '../connectors/search-box/connectSearchBox';
-import type { SortByWidgetDescription } from '../connectors/sort-by/connectSortBy';
-import type { ToggleRefinementWidgetDescription } from '../connectors/toggle-refinement/connectToggleRefinement';
-import type { VoiceSearchWidgetDescription } from '../connectors/voice-search/connectVoiceSearch';
-import type { PlacesWidgetDescription } from '../widgets/places/places';
+import type { AutocompleteWidgetDescription } from '../connectors/autocomplete/connectAutocomplete.js';
+import type { ConfigureWidgetDescription } from '../connectors/configure/connectConfigure.js';
+import type { GeoSearchWidgetDescription } from '../connectors/geo-search/connectGeoSearch.js';
+import type { HierarchicalMenuWidgetDescription } from '../connectors/hierarchical-menu/connectHierarchicalMenu.js';
+import type { HitsPerPageWidgetDescription } from '../connectors/hits-per-page/connectHitsPerPage.js';
+import type { InfiniteHitsWidgetDescription } from '../connectors/infinite-hits/connectInfiniteHits.js';
+import type { MenuWidgetDescription } from '../connectors/menu/connectMenu.js';
+import type { NumericMenuWidgetDescription } from '../connectors/numeric-menu/connectNumericMenu.js';
+import type { PaginationWidgetDescription } from '../connectors/pagination/connectPagination.js';
+import type { RangeWidgetDescription } from '../connectors/range/connectRange.js';
+import type { RatingMenuWidgetDescription } from '../connectors/rating-menu/connectRatingMenu.js';
+import type { RefinementListWidgetDescription } from '../connectors/refinement-list/connectRefinementList.js';
+import type { RelevantSortWidgetDescription } from '../connectors/relevant-sort/connectRelevantSort.js';
+import type { SearchBoxWidgetDescription } from '../connectors/search-box/connectSearchBox.js';
+import type { SortByWidgetDescription } from '../connectors/sort-by/connectSortBy.js';
+import type { ToggleRefinementWidgetDescription } from '../connectors/toggle-refinement/connectToggleRefinement.js';
+import type { VoiceSearchWidgetDescription } from '../connectors/voice-search/connectVoiceSearch.js';
+import type { PlacesWidgetDescription } from '../widgets/places/places.js';
 declare type ConnectorUiStates = AutocompleteWidgetDescription['indexUiState'] & ConfigureWidgetDescription['indexUiState'] & GeoSearchWidgetDescription['indexUiState'] & HierarchicalMenuWidgetDescription['indexUiState'] & HitsPerPageWidgetDescription['indexUiState'] & InfiniteHitsWidgetDescription['indexUiState'] & MenuWidgetDescription['indexUiState'] & NumericMenuWidgetDescription['indexUiState'] & PaginationWidgetDescription['indexUiState'] & RangeWidgetDescription['indexUiState'] & RatingMenuWidgetDescription['indexUiState'] & RefinementListWidgetDescription['indexUiState'] & RelevantSortWidgetDescription['indexUiState'] & SearchBoxWidgetDescription['indexUiState'] & SortByWidgetDescription['indexUiState'] & ToggleRefinementWidgetDescription['indexUiState'] & VoiceSearchWidgetDescription['indexUiState'];
 declare type WidgetUiStates = PlacesWidgetDescription['indexUiState'];
 export declare type IndexUiState = Partial<ConnectorUiStates & WidgetUiStates>;
diff --git a/node_modules/instantsearch.js/es/types/widget-factory.d.ts b/node_modules/instantsearch.js/es/types/widget-factory.d.ts
index 802e396..e3c72eb 100644
--- a/node_modules/instantsearch.js/es/types/widget-factory.d.ts
+++ b/node_modules/instantsearch.js/es/types/widget-factory.d.ts
@@ -1,4 +1,4 @@
-import type { UnknownWidgetParams, Widget, WidgetDescription } from './widget';
+import type { UnknownWidgetParams, Widget, WidgetDescription } from './widget.js';
 /**
  * The function that creates a new widget.
  */
diff --git a/node_modules/instantsearch.js/es/types/widget.d.ts b/node_modules/instantsearch.js/es/types/widget.d.ts
index 913c868..012d5ec 100644
--- a/node_modules/instantsearch.js/es/types/widget.d.ts
+++ b/node_modules/instantsearch.js/es/types/widget.d.ts
@@ -1,9 +1,9 @@
-import type { IndexWidget } from '../widgets/index/index';
+import type { IndexWidget } from '../widgets/index/index.js';
 import type { AlgoliaSearchHelper as Helper, SearchParameters, SearchResults } from 'algoliasearch-helper';
-import type { InstantSearch } from './instantsearch';
-import type { IndexUiState, UiState } from './ui-state';
-import type { IndexRenderState, WidgetRenderState } from './render-state';
-import type { Expand, RequiredKeys } from './utils';
+import type { InstantSearch } from './instantsearch.js';
+import type { IndexUiState, UiState } from './ui-state.js';
+import type { IndexRenderState, WidgetRenderState } from './render-state.js';
+import type { Expand, RequiredKeys } from './utils/index.js';
 export declare type ScopedResult = {
     indexId: string;
     results: SearchResults;
diff --git a/node_modules/instantsearch.js/es/widgets/analytics/analytics.d.ts b/node_modules/instantsearch.js/es/widgets/analytics/analytics.d.ts
index 155f4dc..f244548 100644
--- a/node_modules/instantsearch.js/es/widgets/analytics/analytics.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/analytics/analytics.d.ts
@@ -1,5 +1,5 @@
 import type { SearchParameters, SearchResults } from 'algoliasearch-helper';
-import type { WidgetFactory, WidgetRenderState } from '../../types';
+import type { WidgetFactory, WidgetRenderState } from '../../types/index.js';
 export declare type AnalyticsWidgetParamsPushFunction = (
 /**
  * Contains the search parameters, serialized as a query string.
diff --git a/node_modules/instantsearch.js/es/widgets/analytics/analytics.js b/node_modules/instantsearch.js/es/widgets/analytics/analytics.js
index 62de0a8..78b8d1b 100644
--- a/node_modules/instantsearch.js/es/widgets/analytics/analytics.js
+++ b/node_modules/instantsearch.js/es/widgets/analytics/analytics.js
@@ -4,7 +4,7 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { createDocumentationMessageGenerator, warning } from '../../lib/utils';
+import { createDocumentationMessageGenerator, warning } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'analytics'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/answers/answers.d.ts b/node_modules/instantsearch.js/es/widgets/answers/answers.d.ts
index d9eac79..f81fdcc 100644
--- a/node_modules/instantsearch.js/es/widgets/answers/answers.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/answers/answers.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { WidgetFactory, Template, Hit } from '../../types';
-import type { AnswersConnectorParams, AnswersWidgetDescription } from '../../connectors/answers/connectAnswers';
+import type { WidgetFactory, Template, Hit } from '../../types/index.js';
+import type { AnswersConnectorParams, AnswersWidgetDescription } from '../../connectors/answers/connectAnswers.js';
 export declare type AnswersTemplates = Partial<{
     /**
      * Template to use for the header. This template will receive an object containing `hits` and `isLoading`.
diff --git a/node_modules/instantsearch.js/es/widgets/answers/answers.js b/node_modules/instantsearch.js/es/widgets/answers/answers.js
index 27f7c5e..332b96f 100644
--- a/node_modules/instantsearch.js/es/widgets/answers/answers.js
+++ b/node_modules/instantsearch.js/es/widgets/answers/answers.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import defaultTemplates from './defaultTemplates';
-import { createDocumentationMessageGenerator, getContainerNode, prepareTemplateProps } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import Answers from '../../components/Answers/Answers';
-import connectAnswers from '../../connectors/answers/connectAnswers';
+import defaultTemplates from './defaultTemplates.js';
+import { createDocumentationMessageGenerator, getContainerNode, prepareTemplateProps } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import Answers from '../../components/Answers/Answers.js';
+import connectAnswers from '../../connectors/answers/connectAnswers.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'answers'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/answers/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/answers/defaultTemplates.d.ts
index 3172691..869e184 100644
--- a/node_modules/instantsearch.js/es/widgets/answers/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/answers/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { AnswersComponentTemplates } from '../../components/Answers/Answers';
+import type { AnswersComponentTemplates } from '../../components/Answers/Answers.js';
 declare const defaultTemplates: AnswersComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.d.ts b/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.d.ts
index 32b26e7..9435fb2 100644
--- a/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { BreadcrumbWidgetDescription, BreadcrumbConnectorParams } from '../../connectors/breadcrumb/connectBreadcrumb';
-import type { WidgetFactory, Template } from '../../types';
+import type { BreadcrumbWidgetDescription, BreadcrumbConnectorParams } from '../../connectors/breadcrumb/connectBreadcrumb.js';
+import type { WidgetFactory, Template } from '../../types/index.js';
 export declare type BreadcrumbCSSClasses = Partial<{
     /**
      * CSS class to add to the root element of the widget.
diff --git a/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.js b/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.js
index 582dd78..56995ac 100644
--- a/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.js
+++ b/node_modules/instantsearch.js/es/widgets/breadcrumb/breadcrumb.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import Breadcrumb from '../../components/Breadcrumb/Breadcrumb';
-import connectBreadcrumb from '../../connectors/breadcrumb/connectBreadcrumb';
-import defaultTemplates from './defaultTemplates';
-import { getContainerNode, prepareTemplateProps, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import Breadcrumb from '../../components/Breadcrumb/Breadcrumb.js';
+import connectBreadcrumb from '../../connectors/breadcrumb/connectBreadcrumb.js';
+import defaultTemplates from './defaultTemplates.js';
+import { getContainerNode, prepareTemplateProps, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'breadcrumb'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/breadcrumb/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/breadcrumb/defaultTemplates.d.ts
index 32d8d64..3e613fa 100644
--- a/node_modules/instantsearch.js/es/widgets/breadcrumb/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/breadcrumb/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { BreadcrumbComponentTemplates } from '../../components/Breadcrumb/Breadcrumb';
+import type { BreadcrumbComponentTemplates } from '../../components/Breadcrumb/Breadcrumb.js';
 declare const defaultTemplates: BreadcrumbComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.d.ts b/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.d.ts
index bff931d..14be014 100644
--- a/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { ClearRefinementsConnectorParams, ClearRefinementsWidgetDescription } from '../../connectors/clear-refinements/connectClearRefinements';
-import type { WidgetFactory, Template } from '../../types';
+import type { ClearRefinementsConnectorParams, ClearRefinementsWidgetDescription } from '../../connectors/clear-refinements/connectClearRefinements.js';
+import type { WidgetFactory, Template } from '../../types/index.js';
 export declare type ClearRefinementsCSSClasses = Partial<{
     /**
      * CSS class to add to the wrapper element.
diff --git a/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.js b/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.js
index 6565671..1543d1f 100644
--- a/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.js
+++ b/node_modules/instantsearch.js/es/widgets/clear-refinements/clear-refinements.js
@@ -6,12 +6,12 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 
 /** @jsx h */
 import { h, render } from 'preact';
-import ClearRefinements from '../../components/ClearRefinements/ClearRefinements';
+import ClearRefinements from '../../components/ClearRefinements/ClearRefinements.js';
 import cx from 'classnames';
-import connectClearRefinements from '../../connectors/clear-refinements/connectClearRefinements';
-import defaultTemplates from './defaultTemplates';
-import { getContainerNode, prepareTemplateProps, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import connectClearRefinements from '../../connectors/clear-refinements/connectClearRefinements.js';
+import defaultTemplates from './defaultTemplates.js';
+import { getContainerNode, prepareTemplateProps, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'clear-refinements'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/clear-refinements/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/clear-refinements/defaultTemplates.d.ts
index bb81a94..26a49ae 100644
--- a/node_modules/instantsearch.js/es/widgets/clear-refinements/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/clear-refinements/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { ClearRefinementsComponentTemplates } from '../../components/ClearRefinements/ClearRefinements';
+import type { ClearRefinementsComponentTemplates } from '../../components/ClearRefinements/ClearRefinements.js';
 declare const defaultTemplates: ClearRefinementsComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.d.ts b/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.d.ts
index 5edfdc2..17bcaff 100644
--- a/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.d.ts
@@ -1,6 +1,6 @@
 import type { PlainSearchParameters } from 'algoliasearch-helper';
-import type { ConfigureRelatedItemsConnectorParams, ConfigureRelatedItemsWidgetDescription } from '../../connectors/configure-related-items/connectConfigureRelatedItems';
-import type { WidgetFactory } from '../../types';
+import type { ConfigureRelatedItemsConnectorParams, ConfigureRelatedItemsWidgetDescription } from '../../connectors/configure-related-items/connectConfigureRelatedItems.js';
+import type { WidgetFactory } from '../../types/index.js';
 export declare type ConfigureRelatedItemsWidget = WidgetFactory<ConfigureRelatedItemsWidgetDescription & {
     $$widgetType: 'ais.configureRelatedItems';
 }, ConfigureRelatedItemsConnectorParams, ConfigureRelatedItemsWidgetParams>;
diff --git a/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.js b/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.js
index 089f28e..3f500a6 100644
--- a/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.js
+++ b/node_modules/instantsearch.js/es/widgets/configure-related-items/configure-related-items.js
@@ -4,8 +4,8 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { noop } from '../../lib/utils';
-import connectConfigureRelatedItems from '../../connectors/configure-related-items/connectConfigureRelatedItems';
+import { noop } from '../../lib/utils/index.js';
+import connectConfigureRelatedItems from '../../connectors/configure-related-items/connectConfigureRelatedItems.js';
 
 var configureRelatedItems = function configureRelatedItems(widgetParams) {
   var makeWidget = connectConfigureRelatedItems(noop);
diff --git a/node_modules/instantsearch.js/es/widgets/configure/configure.d.ts b/node_modules/instantsearch.js/es/widgets/configure/configure.d.ts
index 9fe64b2..562b3b5 100644
--- a/node_modules/instantsearch.js/es/widgets/configure/configure.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/configure/configure.d.ts
@@ -1,5 +1,5 @@
-import type { ConfigureConnectorParams, ConfigureWidgetDescription } from '../../connectors/configure/connectConfigure';
-import type { Widget } from '../../types';
+import type { ConfigureConnectorParams, ConfigureWidgetDescription } from '../../connectors/configure/connectConfigure.js';
+import type { Widget } from '../../types/index.js';
 /**
  * A list of [search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/)
  * to enable when the widget mounts.
diff --git a/node_modules/instantsearch.js/es/widgets/configure/configure.js b/node_modules/instantsearch.js/es/widgets/configure/configure.js
index 5f9a2d2..f49110f 100644
--- a/node_modules/instantsearch.js/es/widgets/configure/configure.js
+++ b/node_modules/instantsearch.js/es/widgets/configure/configure.js
@@ -4,8 +4,8 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import connectConfigure from '../../connectors/configure/connectConfigure';
-import { noop } from '../../lib/utils';
+import connectConfigure from '../../connectors/configure/connectConfigure.js';
+import { noop } from '../../lib/utils/index.js';
 /**
  * A list of [search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/)
  * to enable when the widget mounts.
diff --git a/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.d.ts b/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.d.ts
index 0c6bb58..01307e4 100644
--- a/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { CurrentRefinementsConnectorParams, CurrentRefinementsWidgetDescription } from '../../connectors/current-refinements/connectCurrentRefinements';
-import type { WidgetFactory } from '../../types';
+import type { CurrentRefinementsConnectorParams, CurrentRefinementsWidgetDescription } from '../../connectors/current-refinements/connectCurrentRefinements.js';
+import type { WidgetFactory } from '../../types/index.js';
 export declare type CurrentRefinementsCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.js b/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.js
index 585d1bd..9ad5190 100644
--- a/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.js
+++ b/node_modules/instantsearch.js/es/widgets/current-refinements/current-refinements.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import CurrentRefinements from '../../components/CurrentRefinements/CurrentRefinements';
-import connectCurrentRefinements from '../../connectors/current-refinements/connectCurrentRefinements';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import CurrentRefinements from '../../components/CurrentRefinements/CurrentRefinements.js';
+import connectCurrentRefinements from '../../connectors/current-refinements/connectCurrentRefinements.js';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'current-refinements'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.d.ts b/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.d.ts
index 66adf04..f0b0165 100644
--- a/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.d.ts
@@ -1,5 +1,5 @@
-import type { DynamicWidgetsConnectorParams, DynamicWidgetsWidgetDescription } from '../../connectors/dynamic-widgets/connectDynamicWidgets';
-import type { Widget, WidgetFactory } from '../../types';
+import type { DynamicWidgetsConnectorParams, DynamicWidgetsWidgetDescription } from '../../connectors/dynamic-widgets/connectDynamicWidgets.js';
+import type { Widget, WidgetFactory } from '../../types/index.js';
 export declare type DynamicWidgetsWidgetParams = {
     /**
      * CSS Selector or HTMLElement to insert the widget.
diff --git a/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.js b/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.js
index 45e05ba..27174d2 100644
--- a/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.js
+++ b/node_modules/instantsearch.js/es/widgets/dynamic-widgets/dynamic-widgets.js
@@ -4,9 +4,9 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import connectDynamicWidgets from '../../connectors/dynamic-widgets/connectDynamicWidgets';
-import { component } from '../../lib/suit';
-import { createDocumentationMessageGenerator, getContainerNode, getWidgetAttribute } from '../../lib/utils';
+import connectDynamicWidgets from '../../connectors/dynamic-widgets/connectDynamicWidgets.js';
+import { component } from '../../lib/suit.js';
+import { createDocumentationMessageGenerator, getContainerNode, getWidgetAttribute } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'dynamic-widgets'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/geo-search/GeoSearchRenderer.js b/node_modules/instantsearch.js/es/widgets/geo-search/GeoSearchRenderer.js
index 3575c9c..cf8762b 100644
--- a/node_modules/instantsearch.js/es/widgets/geo-search/GeoSearchRenderer.js
+++ b/node_modules/instantsearch.js/es/widgets/geo-search/GeoSearchRenderer.js
@@ -18,8 +18,8 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 
 /** @jsx h */
 import { h, render } from 'preact';
-import { prepareTemplateProps } from '../../lib/utils';
-import GeoSearchControls from '../../components/GeoSearchControls/GeoSearchControls';
+import { prepareTemplateProps } from '../../lib/utils/index.js';
+import GeoSearchControls from '../../components/GeoSearchControls/GeoSearchControls.js';
 
 var refineWithMap = function refineWithMap(_ref) {
   var refine = _ref.refine,
diff --git a/node_modules/instantsearch.js/es/widgets/geo-search/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/geo-search/defaultTemplates.d.ts
index bdb3f0e..8652087 100644
--- a/node_modules/instantsearch.js/es/widgets/geo-search/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/geo-search/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { GeoSearchComponentTemplates } from './geo-search';
+import type { GeoSearchComponentTemplates } from './geo-search.js';
 declare const defaultTemplates: GeoSearchComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.d.ts b/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.d.ts
index 7ae3237..12c79e3 100644
--- a/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.d.ts
@@ -1,7 +1,7 @@
 /// <reference types="google.maps" />
-import type { GeoSearchConnectorParams, GeoSearchWidgetDescription, GeoHit } from '../../connectors/geo-search/connectGeoSearch';
-import type { HTMLMarkerArguments } from './createHTMLMarker';
-import type { GeoLoc, Template, WidgetFactory } from '../../types';
+import type { GeoSearchConnectorParams, GeoSearchWidgetDescription, GeoHit } from '../../connectors/geo-search/connectGeoSearch.js';
+import type { HTMLMarkerArguments } from './createHTMLMarker.js';
+import type { GeoLoc, Template, WidgetFactory } from '../../types/index.js';
 export declare type CreateMarker = (args: {
     item: GeoHit;
     map: google.maps.Map;
diff --git a/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.js b/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.js
index 9c4c4ef..32251e2 100644
--- a/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.js
+++ b/node_modules/instantsearch.js/es/widgets/geo-search/geo-search.js
@@ -13,12 +13,12 @@ function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) r
 /* global google */
 import cx from 'classnames';
 import { render } from 'preact';
-import { getContainerNode, renderTemplate, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import connectGeoSearch from '../../connectors/geo-search/connectGeoSearch';
-import renderer from './GeoSearchRenderer';
-import defaultTemplates from './defaultTemplates';
-import createHTMLMarker from './createHTMLMarker';
+import { getContainerNode, renderTemplate, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import connectGeoSearch from '../../connectors/geo-search/connectGeoSearch.js';
+import renderer from './GeoSearchRenderer.js';
+import defaultTemplates from './defaultTemplates.js';
+import createHTMLMarker from './createHTMLMarker.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'geo-search'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/hierarchical-menu/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/hierarchical-menu/defaultTemplates.d.ts
index 413a7b1..b2a5e47 100644
--- a/node_modules/instantsearch.js/es/widgets/hierarchical-menu/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/hierarchical-menu/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { HierarchicalMenuComponentTemplates } from './hierarchical-menu';
+import type { HierarchicalMenuComponentTemplates } from './hierarchical-menu.js';
 declare const defaultTemplates: HierarchicalMenuComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.d.ts b/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.d.ts
index ffc957e..8cb3415 100644
--- a/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { HierarchicalMenuItem, HierarchicalMenuConnectorParams, HierarchicalMenuWidgetDescription } from '../../connectors/hierarchical-menu/connectHierarchicalMenu';
-import type { TransformItems, Template, WidgetFactory, SortBy, ComponentCSSClasses } from '../../types';
+import type { HierarchicalMenuItem, HierarchicalMenuConnectorParams, HierarchicalMenuWidgetDescription } from '../../connectors/hierarchical-menu/connectHierarchicalMenu.js';
+import type { TransformItems, Template, WidgetFactory, SortBy, ComponentCSSClasses } from '../../types/index.js';
 declare type HierarchicalMenuTemplates = Partial<{
     /**
      * Item template, provided with `name`, `count`, `isRefined`, `url` data properties.
diff --git a/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.js b/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.js
index 2565b57..99456ed 100644
--- a/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.js
+++ b/node_modules/instantsearch.js/es/widgets/hierarchical-menu/hierarchical-menu.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import RefinementList from '../../components/RefinementList/RefinementList';
-import connectHierarchicalMenu from '../../connectors/hierarchical-menu/connectHierarchicalMenu';
-import defaultTemplates from './defaultTemplates';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import RefinementList from '../../components/RefinementList/RefinementList.js';
+import connectHierarchicalMenu from '../../connectors/hierarchical-menu/connectHierarchicalMenu.js';
+import defaultTemplates from './defaultTemplates.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'hierarchical-menu'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.d.ts b/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.d.ts
index f6e6702..0f396de 100644
--- a/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { HitsPerPageConnectorParams, HitsPerPageWidgetDescription } from '../../connectors/hits-per-page/connectHitsPerPage';
-import type { WidgetFactory } from '../../types';
+import type { HitsPerPageConnectorParams, HitsPerPageWidgetDescription } from '../../connectors/hits-per-page/connectHitsPerPage.js';
+import type { WidgetFactory } from '../../types/index.js';
 export declare type HitsPerPageCSSClasses = Partial<{
     /**
      * CSS classes added to the outer `<div>`.
diff --git a/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.js b/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.js
index 53010b4..fa38a60 100644
--- a/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.js
+++ b/node_modules/instantsearch.js/es/widgets/hits-per-page/hits-per-page.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import Selector from '../../components/Selector/Selector';
-import connectHitsPerPage from '../../connectors/hits-per-page/connectHitsPerPage';
-import { getContainerNode, createDocumentationMessageGenerator, find } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import Selector from '../../components/Selector/Selector.js';
+import connectHitsPerPage from '../../connectors/hits-per-page/connectHitsPerPage.js';
+import { getContainerNode, createDocumentationMessageGenerator, find } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'hits-per-page'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/hits/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/hits/defaultTemplates.d.ts
index 61b2f37..c351330 100644
--- a/node_modules/instantsearch.js/es/widgets/hits/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/hits/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { HitsComponentTemplates } from '../../components/Hits/Hits';
+import type { HitsComponentTemplates } from '../../components/Hits/Hits.js';
 declare const defaultTemplates: HitsComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/hits/hits.d.ts b/node_modules/instantsearch.js/es/widgets/hits/hits.d.ts
index e1ad86c..fd08de3 100644
--- a/node_modules/instantsearch.js/es/widgets/hits/hits.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/hits/hits.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { HitsConnectorParams, HitsWidgetDescription } from '../../connectors/hits/connectHits';
-import type { Template, TemplateWithBindEvent, Hit, WidgetFactory } from '../../types';
+import type { HitsConnectorParams, HitsWidgetDescription } from '../../connectors/hits/connectHits.js';
+import type { Template, TemplateWithBindEvent, Hit, WidgetFactory } from '../../types/index.js';
 export declare type HitsCSSClasses = Partial<{
     /**
      * CSS class to add to the wrapping element.
diff --git a/node_modules/instantsearch.js/es/widgets/hits/hits.js b/node_modules/instantsearch.js/es/widgets/hits/hits.js
index c7f7b24..73a7a7f 100644
--- a/node_modules/instantsearch.js/es/widgets/hits/hits.js
+++ b/node_modules/instantsearch.js/es/widgets/hits/hits.js
@@ -7,12 +7,12 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import connectHits from '../../connectors/hits/connectHits';
-import Hits from '../../components/Hits/Hits';
-import defaultTemplates from './defaultTemplates';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import { withInsights, withInsightsListener } from '../../lib/insights';
+import connectHits from '../../connectors/hits/connectHits.js';
+import Hits from '../../components/Hits/Hits.js';
+import defaultTemplates from './defaultTemplates.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import { withInsights, withInsightsListener } from '../../lib/insights.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'hits'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/index.d.ts b/node_modules/instantsearch.js/es/widgets/index.d.ts
index 94438b7..3051990 100644
--- a/node_modules/instantsearch.js/es/widgets/index.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/index.d.ts
@@ -1,36 +1,36 @@
-export { default as analytics } from './analytics/analytics';
-export { default as breadcrumb } from './breadcrumb/breadcrumb';
-export { default as clearRefinements } from './clear-refinements/clear-refinements';
-export { default as configure } from './configure/configure';
-export { default as currentRefinements } from './current-refinements/current-refinements';
-export { default as EXPERIMENTAL_answers } from './answers/answers';
-export { default as EXPERIMENTAL_configureRelatedItems } from './configure-related-items/configure-related-items';
-import dynamicWidgets from './dynamic-widgets/dynamic-widgets';
+export { default as analytics } from './analytics/analytics.js';
+export { default as breadcrumb } from './breadcrumb/breadcrumb.js';
+export { default as clearRefinements } from './clear-refinements/clear-refinements.js';
+export { default as configure } from './configure/configure.js';
+export { default as currentRefinements } from './current-refinements/current-refinements.js';
+export { default as EXPERIMENTAL_answers } from './answers/answers.js';
+export { default as EXPERIMENTAL_configureRelatedItems } from './configure-related-items/configure-related-items.js';
+import dynamicWidgets from './dynamic-widgets/dynamic-widgets.js';
 export { dynamicWidgets };
 /** @deprecated use dynamicWidgets */
 export declare const EXPERIMENTAL_dynamicWidgets: import("./dynamic-widgets/dynamic-widgets").DynamicWidgetsWidget;
-export { default as geoSearch } from './geo-search/geo-search';
-export { default as hierarchicalMenu } from './hierarchical-menu/hierarchical-menu';
-export { default as hits } from './hits/hits';
-export { default as hitsPerPage } from './hits-per-page/hits-per-page';
-export { default as index } from './index/index';
-export { default as infiniteHits } from './infinite-hits/infinite-hits';
-export { default as menu } from './menu/menu';
-export { default as menuSelect } from './menu-select/menu-select';
-export { default as numericMenu } from './numeric-menu/numeric-menu';
-export { default as pagination } from './pagination/pagination';
-export { default as panel } from './panel/panel';
-export { default as places } from './places/places';
-export { default as poweredBy } from './powered-by/powered-by';
-export { default as queryRuleContext } from './query-rule-context/query-rule-context';
-export { default as queryRuleCustomData } from './query-rule-custom-data/query-rule-custom-data';
-export { default as rangeInput } from './range-input/range-input';
-export { default as rangeSlider } from './range-slider/range-slider';
-export { default as ratingMenu } from './rating-menu/rating-menu';
-export { default as refinementList } from './refinement-list/refinement-list';
-export { default as relevantSort } from './relevant-sort/relevant-sort';
-export { default as searchBox } from './search-box/search-box';
-export { default as sortBy } from './sort-by/sort-by';
-export { default as stats } from './stats/stats';
-export { default as toggleRefinement } from './toggle-refinement/toggle-refinement';
-export { default as voiceSearch } from './voice-search/voice-search';
+export { default as geoSearch } from './geo-search/geo-search.js';
+export { default as hierarchicalMenu } from './hierarchical-menu/hierarchical-menu.js';
+export { default as hits } from './hits/hits.js';
+export { default as hitsPerPage } from './hits-per-page/hits-per-page.js';
+export { default as index } from './index/index.js';
+export { default as infiniteHits } from './infinite-hits/infinite-hits.js';
+export { default as menu } from './menu/menu.js';
+export { default as menuSelect } from './menu-select/menu-select.js';
+export { default as numericMenu } from './numeric-menu/numeric-menu.js';
+export { default as pagination } from './pagination/pagination.js';
+export { default as panel } from './panel/panel.js';
+export { default as places } from './places/places.js';
+export { default as poweredBy } from './powered-by/powered-by.js';
+export { default as queryRuleContext } from './query-rule-context/query-rule-context.js';
+export { default as queryRuleCustomData } from './query-rule-custom-data/query-rule-custom-data.js';
+export { default as rangeInput } from './range-input/range-input.js';
+export { default as rangeSlider } from './range-slider/range-slider.js';
+export { default as ratingMenu } from './rating-menu/rating-menu.js';
+export { default as refinementList } from './refinement-list/refinement-list.js';
+export { default as relevantSort } from './relevant-sort/relevant-sort.js';
+export { default as searchBox } from './search-box/search-box.js';
+export { default as sortBy } from './sort-by/sort-by.js';
+export { default as stats } from './stats/stats.js';
+export { default as toggleRefinement } from './toggle-refinement/toggle-refinement.js';
+export { default as voiceSearch } from './voice-search/voice-search.js';
diff --git a/node_modules/instantsearch.js/es/widgets/index.js b/node_modules/instantsearch.js/es/widgets/index.js
index f5fde37..527b6d2 100644
--- a/node_modules/instantsearch.js/es/widgets/index.js
+++ b/node_modules/instantsearch.js/es/widgets/index.js
@@ -1,38 +1,38 @@
-export { default as analytics } from './analytics/analytics';
-export { default as breadcrumb } from './breadcrumb/breadcrumb';
-export { default as clearRefinements } from './clear-refinements/clear-refinements';
-export { default as configure } from './configure/configure';
-export { default as currentRefinements } from './current-refinements/current-refinements';
-export { default as EXPERIMENTAL_answers } from './answers/answers';
-export { default as EXPERIMENTAL_configureRelatedItems } from './configure-related-items/configure-related-items';
-import dynamicWidgets from './dynamic-widgets/dynamic-widgets';
+export { default as analytics } from './analytics/analytics.js';
+export { default as breadcrumb } from './breadcrumb/breadcrumb.js';
+export { default as clearRefinements } from './clear-refinements/clear-refinements.js';
+export { default as configure } from './configure/configure.js';
+export { default as currentRefinements } from './current-refinements/current-refinements.js';
+export { default as EXPERIMENTAL_answers } from './answers/answers.js';
+export { default as EXPERIMENTAL_configureRelatedItems } from './configure-related-items/configure-related-items.js';
+import dynamicWidgets from './dynamic-widgets/dynamic-widgets.js';
 export { dynamicWidgets };
-import { deprecate } from '../lib/utils';
+import { deprecate } from '../lib/utils/index.js';
 /** @deprecated use dynamicWidgets */
 
 export var EXPERIMENTAL_dynamicWidgets = deprecate(dynamicWidgets, 'use dynamicWidgets');
-export { default as geoSearch } from './geo-search/geo-search';
-export { default as hierarchicalMenu } from './hierarchical-menu/hierarchical-menu';
-export { default as hits } from './hits/hits';
-export { default as hitsPerPage } from './hits-per-page/hits-per-page';
-export { default as index } from './index/index';
-export { default as infiniteHits } from './infinite-hits/infinite-hits';
-export { default as menu } from './menu/menu';
-export { default as menuSelect } from './menu-select/menu-select';
-export { default as numericMenu } from './numeric-menu/numeric-menu';
-export { default as pagination } from './pagination/pagination';
-export { default as panel } from './panel/panel';
-export { default as places } from './places/places';
-export { default as poweredBy } from './powered-by/powered-by';
-export { default as queryRuleContext } from './query-rule-context/query-rule-context';
-export { default as queryRuleCustomData } from './query-rule-custom-data/query-rule-custom-data';
-export { default as rangeInput } from './range-input/range-input';
-export { default as rangeSlider } from './range-slider/range-slider';
-export { default as ratingMenu } from './rating-menu/rating-menu';
-export { default as refinementList } from './refinement-list/refinement-list';
-export { default as relevantSort } from './relevant-sort/relevant-sort';
-export { default as searchBox } from './search-box/search-box';
-export { default as sortBy } from './sort-by/sort-by';
-export { default as stats } from './stats/stats';
-export { default as toggleRefinement } from './toggle-refinement/toggle-refinement';
-export { default as voiceSearch } from './voice-search/voice-search';
\ No newline at end of file
+export { default as geoSearch } from './geo-search/geo-search.js';
+export { default as hierarchicalMenu } from './hierarchical-menu/hierarchical-menu.js';
+export { default as hits } from './hits/hits.js';
+export { default as hitsPerPage } from './hits-per-page/hits-per-page.js';
+export { default as index } from './index/index.js';
+export { default as infiniteHits } from './infinite-hits/infinite-hits.js';
+export { default as menu } from './menu/menu.js';
+export { default as menuSelect } from './menu-select/menu-select.js';
+export { default as numericMenu } from './numeric-menu/numeric-menu.js';
+export { default as pagination } from './pagination/pagination.js';
+export { default as panel } from './panel/panel.js';
+export { default as places } from './places/places.js';
+export { default as poweredBy } from './powered-by/powered-by.js';
+export { default as queryRuleContext } from './query-rule-context/query-rule-context.js';
+export { default as queryRuleCustomData } from './query-rule-custom-data/query-rule-custom-data.js';
+export { default as rangeInput } from './range-input/range-input.js';
+export { default as rangeSlider } from './range-slider/range-slider.js';
+export { default as ratingMenu } from './rating-menu/rating-menu.js';
+export { default as refinementList } from './refinement-list/refinement-list.js';
+export { default as relevantSort } from './relevant-sort/relevant-sort.js';
+export { default as searchBox } from './search-box/search-box.js';
+export { default as sortBy } from './sort-by/sort-by.js';
+export { default as stats } from './stats/stats.js';
+export { default as toggleRefinement } from './toggle-refinement/toggle-refinement.js';
+export { default as voiceSearch } from './voice-search/voice-search.js';
diff --git a/node_modules/instantsearch.js/es/widgets/index/index.d.ts b/node_modules/instantsearch.js/es/widgets/index/index.d.ts
index b2ab0eb..c44f506 100644
--- a/node_modules/instantsearch.js/es/widgets/index/index.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/index/index.d.ts
@@ -1,5 +1,5 @@
 import type { AlgoliaSearchHelper as Helper, SearchParameters, SearchResults } from 'algoliasearch-helper';
-import type { UiState, IndexUiState, Widget, InitOptions, RenderOptions, ScopedResult } from '../../types';
+import type { UiState, IndexUiState, Widget, InitOptions, RenderOptions, ScopedResult } from '../../types/index.js';
 export declare type IndexWidgetParams = {
     indexName: string;
     indexId?: string;
diff --git a/node_modules/instantsearch.js/es/widgets/index/index.js b/node_modules/instantsearch.js/es/widgets/index/index.js
index 56f7084..10fa287 100644
--- a/node_modules/instantsearch.js/es/widgets/index/index.js
+++ b/node_modules/instantsearch.js/es/widgets/index/index.js
@@ -21,7 +21,7 @@ function _objectWithoutProperties(source, excluded) { if (source == null) return
 function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
 
 import algoliasearchHelper from 'algoliasearch-helper';
-import { checkIndexUiState, createDocumentationMessageGenerator, resolveSearchParameters, mergeSearchParameters, warning } from '../../lib/utils';
+import { checkIndexUiState, createDocumentationMessageGenerator, resolveSearchParameters, mergeSearchParameters, warning } from '../../lib/utils/index.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'index-widget'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/infinite-hits/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/infinite-hits/defaultTemplates.d.ts
index bc0792f..ebbb895 100644
--- a/node_modules/instantsearch.js/es/widgets/infinite-hits/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/infinite-hits/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { InfiniteHitsComponentTemplates } from '../../components/InfiniteHits/InfiniteHits';
+import type { InfiniteHitsComponentTemplates } from '../../components/InfiniteHits/InfiniteHits.js';
 declare const defaultTemplates: InfiniteHitsComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.d.ts b/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.d.ts
index 749e58b..b0869f2 100644
--- a/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
 import type { SearchResults } from 'algoliasearch-helper';
-import type { InfiniteHitsConnectorParams, InfiniteHitsCache, InfiniteHitsWidgetDescription } from '../../connectors/infinite-hits/connectInfiniteHits';
-import type { WidgetFactory, Template, TemplateWithBindEvent, Hit } from '../../types';
+import type { InfiniteHitsConnectorParams, InfiniteHitsCache, InfiniteHitsWidgetDescription } from '../../connectors/infinite-hits/connectInfiniteHits.js';
+import type { WidgetFactory, Template, TemplateWithBindEvent, Hit } from '../../types/index.js';
 export declare type InfiniteHitsCSSClasses = Partial<{
     /**
      * The root element of the widget.
diff --git a/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.js b/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.js
index a040ca5..31dfe84 100644
--- a/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.js
+++ b/node_modules/instantsearch.js/es/widgets/infinite-hits/infinite-hits.js
@@ -7,12 +7,12 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import InfiniteHits from '../../components/InfiniteHits/InfiniteHits';
-import connectInfiniteHits from '../../connectors/infinite-hits/connectInfiniteHits';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import { withInsights, withInsightsListener } from '../../lib/insights';
-import defaultTemplates from './defaultTemplates';
+import InfiniteHits from '../../components/InfiniteHits/InfiniteHits.js';
+import connectInfiniteHits from '../../connectors/infinite-hits/connectInfiniteHits.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import { withInsights, withInsightsListener } from '../../lib/insights.js';
+import defaultTemplates from './defaultTemplates.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'infinite-hits'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/menu-select/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/menu-select/defaultTemplates.d.ts
index 990406f..9a1ae20 100644
--- a/node_modules/instantsearch.js/es/widgets/menu-select/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/menu-select/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { MenuSelectComponentTemplates } from '../../components/MenuSelect/MenuSelect';
+import type { MenuSelectComponentTemplates } from '../../components/MenuSelect/MenuSelect.js';
 declare const defaultTemplates: MenuSelectComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.d.ts b/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.d.ts
index 2535d43..33d4a7f 100644
--- a/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { MenuConnectorParams, MenuWidgetDescription } from '../../connectors/menu/connectMenu';
-import type { Template, WidgetFactory } from '../../types';
+import type { MenuConnectorParams, MenuWidgetDescription } from '../../connectors/menu/connectMenu.js';
+import type { Template, WidgetFactory } from '../../types/index.js';
 export declare type MenuSelectCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.js b/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.js
index e07ae2f..51e4560 100644
--- a/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.js
+++ b/node_modules/instantsearch.js/es/widgets/menu-select/menu-select.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import connectMenu from '../../connectors/menu/connectMenu';
-import MenuSelect from '../../components/MenuSelect/MenuSelect';
-import defaultTemplates from './defaultTemplates';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import connectMenu from '../../connectors/menu/connectMenu.js';
+import MenuSelect from '../../components/MenuSelect/MenuSelect.js';
+import defaultTemplates from './defaultTemplates.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'menu-select'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/menu/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/menu/defaultTemplates.d.ts
index ce93de5..f4b7688 100644
--- a/node_modules/instantsearch.js/es/widgets/menu/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/menu/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { MenuComponentTemplates } from './menu';
+import type { MenuComponentTemplates } from './menu.js';
 declare const defaultTemplates: MenuComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/menu/menu.d.ts b/node_modules/instantsearch.js/es/widgets/menu/menu.d.ts
index de92cfe..f9382ec 100644
--- a/node_modules/instantsearch.js/es/widgets/menu/menu.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/menu/menu.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { MenuConnectorParams, MenuWidgetDescription } from '../../connectors/menu/connectMenu';
-import type { ComponentCSSClasses, Template, WidgetFactory } from '../../types';
+import type { MenuConnectorParams, MenuWidgetDescription } from '../../connectors/menu/connectMenu.js';
+import type { ComponentCSSClasses, Template, WidgetFactory } from '../../types/index.js';
 export declare type MenuCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/menu/menu.js b/node_modules/instantsearch.js/es/widgets/menu/menu.js
index 4a4292d..d554634 100644
--- a/node_modules/instantsearch.js/es/widgets/menu/menu.js
+++ b/node_modules/instantsearch.js/es/widgets/menu/menu.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import RefinementList from '../../components/RefinementList/RefinementList';
-import connectMenu from '../../connectors/menu/connectMenu';
-import defaultTemplates from './defaultTemplates';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import RefinementList from '../../components/RefinementList/RefinementList.js';
+import connectMenu from '../../connectors/menu/connectMenu.js';
+import defaultTemplates from './defaultTemplates.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'menu'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/numeric-menu/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/numeric-menu/defaultTemplates.d.ts
index b18418a..4f47d5c 100644
--- a/node_modules/instantsearch.js/es/widgets/numeric-menu/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/numeric-menu/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { NumericMenuComponentTemplates } from './numeric-menu';
+import type { NumericMenuComponentTemplates } from './numeric-menu.js';
 declare const defaultTemplates: NumericMenuComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.d.ts b/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.d.ts
index e87e04e..03e1888 100644
--- a/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { NumericMenuConnectorParams, NumericMenuWidgetDescription } from '../../connectors/numeric-menu/connectNumericMenu';
-import type { ComponentCSSClasses, Template, WidgetFactory } from '../../types';
+import type { NumericMenuConnectorParams, NumericMenuWidgetDescription } from '../../connectors/numeric-menu/connectNumericMenu.js';
+import type { ComponentCSSClasses, Template, WidgetFactory } from '../../types/index.js';
 export declare type NumericMenuCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.js b/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.js
index de3d8e2..fe71530 100644
--- a/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.js
+++ b/node_modules/instantsearch.js/es/widgets/numeric-menu/numeric-menu.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import RefinementList from '../../components/RefinementList/RefinementList';
-import connectNumericMenu from '../../connectors/numeric-menu/connectNumericMenu';
-import defaultTemplates from './defaultTemplates';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import RefinementList from '../../components/RefinementList/RefinementList.js';
+import connectNumericMenu from '../../connectors/numeric-menu/connectNumericMenu.js';
+import defaultTemplates from './defaultTemplates.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'numeric-menu'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/pagination/pagination.d.ts b/node_modules/instantsearch.js/es/widgets/pagination/pagination.d.ts
index fad2547..8385360 100644
--- a/node_modules/instantsearch.js/es/widgets/pagination/pagination.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/pagination/pagination.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { PaginationConnectorParams, PaginationWidgetDescription } from '../../connectors/pagination/connectPagination';
-import type { WidgetFactory } from '../../types';
+import type { PaginationConnectorParams, PaginationWidgetDescription } from '../../connectors/pagination/connectPagination.js';
+import type { WidgetFactory } from '../../types/index.js';
 export declare type PaginationCSSClasses = Partial<{
     /**
      * CSS classes added to the root element of the widget.
diff --git a/node_modules/instantsearch.js/es/widgets/pagination/pagination.js b/node_modules/instantsearch.js/es/widgets/pagination/pagination.js
index d9b889c..030ea3f 100644
--- a/node_modules/instantsearch.js/es/widgets/pagination/pagination.js
+++ b/node_modules/instantsearch.js/es/widgets/pagination/pagination.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import Pagination from '../../components/Pagination/Pagination';
-import connectPagination from '../../connectors/pagination/connectPagination';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import Pagination from '../../components/Pagination/Pagination.js';
+import connectPagination from '../../connectors/pagination/connectPagination.js';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var suit = component('Pagination');
 var withUsage = createDocumentationMessageGenerator({
   name: 'pagination'
diff --git a/node_modules/instantsearch.js/es/widgets/panel/panel.d.ts b/node_modules/instantsearch.js/es/widgets/panel/panel.d.ts
index 8646eb3..7c99d7c 100644
--- a/node_modules/instantsearch.js/es/widgets/panel/panel.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/panel/panel.d.ts
@@ -1,5 +1,5 @@
 /** @jsx h */
-import type { Template, RenderOptions, WidgetFactory, InitOptions, Widget } from '../../types';
+import type { Template, RenderOptions, WidgetFactory, InitOptions, Widget } from '../../types/index.js';
 export declare type PanelCSSClasses = Partial<{
     /**
      * CSS classes to add to the root element of the widget.
diff --git a/node_modules/instantsearch.js/es/widgets/panel/panel.js b/node_modules/instantsearch.js/es/widgets/panel/panel.js
index f125e83..0eace0f 100644
--- a/node_modules/instantsearch.js/es/widgets/panel/panel.js
+++ b/node_modules/instantsearch.js/es/widgets/panel/panel.js
@@ -7,9 +7,9 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import { createDocumentationMessageGenerator, getContainerNode, getObjectType, warning } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import Panel from '../../components/Panel/Panel';
+import { createDocumentationMessageGenerator, getContainerNode, getObjectType, warning } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import Panel from '../../components/Panel/Panel.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'panel'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/places/places.d.ts b/node_modules/instantsearch.js/es/widgets/places/places.d.ts
index 0c4ff18..f4973bf 100644
--- a/node_modules/instantsearch.js/es/widgets/places/places.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/places/places.d.ts
@@ -1,6 +1,6 @@
 // @ts-ignore
 import type * as Places from 'places.js';
-import type { WidgetFactory, WidgetRenderState } from '../../types';
+import type { WidgetFactory, WidgetRenderState } from '../../types/index.js';
 declare type StaticOptions = Places.StaticOptions;
 declare type PlacesInstance = Places.PlacesInstance;
 declare type ReconfigurableOptions = Places.ReconfigurableOptions;
diff --git a/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.d.ts b/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.d.ts
index afa3268..d0cfa41 100644
--- a/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { PoweredByConnectorParams, PoweredByWidgetDescription } from '../../connectors/powered-by/connectPoweredBy';
-import type { WidgetFactory } from '../../types';
+import type { PoweredByConnectorParams, PoweredByWidgetDescription } from '../../connectors/powered-by/connectPoweredBy.js';
+import type { WidgetFactory } from '../../types/index.js';
 export declare type PoweredByCSSClasses = Partial<{
     /**
      * CSS class to add to the wrapping element.
diff --git a/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.js b/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.js
index 21c83c7..ea8ecf3 100644
--- a/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.js
+++ b/node_modules/instantsearch.js/es/widgets/powered-by/powered-by.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import PoweredBy from '../../components/PoweredBy/PoweredBy';
-import connectPoweredBy from '../../connectors/powered-by/connectPoweredBy';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import PoweredBy from '../../components/PoweredBy/PoweredBy.js';
+import connectPoweredBy from '../../connectors/powered-by/connectPoweredBy.js';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var suit = component('PoweredBy');
 var withUsage = createDocumentationMessageGenerator({
   name: 'powered-by'
diff --git a/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.d.ts b/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.d.ts
index d702bca..cb5697c 100644
--- a/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.d.ts
@@ -1,5 +1,5 @@
-import type { WidgetFactory } from '../../types';
-import type { ParamTrackedFilters, ParamTransformRuleContexts, QueryRulesConnectorParams, QueryRulesWidgetDescription } from '../../connectors/query-rules/connectQueryRules';
+import type { WidgetFactory } from '../../types/index.js';
+import type { ParamTrackedFilters, ParamTransformRuleContexts, QueryRulesConnectorParams, QueryRulesWidgetDescription } from '../../connectors/query-rules/connectQueryRules.js';
 export declare type QueryRuleContextWidgetParams = {
     trackedFilters: ParamTrackedFilters;
     transformRuleContexts?: ParamTransformRuleContexts;
diff --git a/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.js b/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.js
index aec21b6..ce5d316 100644
--- a/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.js
+++ b/node_modules/instantsearch.js/es/widgets/query-rule-context/query-rule-context.js
@@ -4,8 +4,8 @@ function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { va
 
 function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
 
-import { createDocumentationMessageGenerator, noop } from '../../lib/utils';
-import connectQueryRules from '../../connectors/query-rules/connectQueryRules';
+import { createDocumentationMessageGenerator, noop } from '../../lib/utils/index.js';
+import connectQueryRules from '../../connectors/query-rules/connectQueryRules.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'query-rule-context'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.d.ts b/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.d.ts
index 93f395f..f0068e2 100644
--- a/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
-import type { WidgetFactory, Template } from '../../types';
-import type { QueryRulesConnectorParams, QueryRulesWidgetDescription } from '../../connectors/query-rules/connectQueryRules';
-import type { QueryRuleCustomDataComponentTemplates } from '../../components/QueryRuleCustomData/QueryRuleCustomData';
+import type { WidgetFactory, Template } from '../../types/index.js';
+import type { QueryRulesConnectorParams, QueryRulesWidgetDescription } from '../../connectors/query-rules/connectQueryRules.js';
+import type { QueryRuleCustomDataComponentTemplates } from '../../components/QueryRuleCustomData/QueryRuleCustomData.js';
 export declare type QueryRuleCustomDataCSSClasses = Partial<{
     root: string | string[];
 }>;
diff --git a/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.js b/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.js
index 3517c25..d46c832 100644
--- a/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.js
+++ b/node_modules/instantsearch.js/es/widgets/query-rule-custom-data/query-rule-custom-data.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import connectQueryRules from '../../connectors/query-rules/connectQueryRules';
-import CustomData from '../../components/QueryRuleCustomData/QueryRuleCustomData';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import connectQueryRules from '../../connectors/query-rules/connectQueryRules.js';
+import CustomData from '../../components/QueryRuleCustomData/QueryRuleCustomData.js';
 export var defaultTemplates = {
   default: function _default(_ref) {
     var items = _ref.items;
diff --git a/node_modules/instantsearch.js/es/widgets/range-input/range-input.d.ts b/node_modules/instantsearch.js/es/widgets/range-input/range-input.d.ts
index 4c5a8e6..33137f0 100644
--- a/node_modules/instantsearch.js/es/widgets/range-input/range-input.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/range-input/range-input.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { RangeConnectorParams, RangeWidgetDescription } from '../../connectors/range/connectRange';
-import type { Template, WidgetFactory } from '../../types';
+import type { RangeConnectorParams, RangeWidgetDescription } from '../../connectors/range/connectRange.js';
+import type { Template, WidgetFactory } from '../../types/index.js';
 export declare type RangeInputTemplates = Partial<{
     /**
      * The label of the separator, between min and max.
diff --git a/node_modules/instantsearch.js/es/widgets/range-input/range-input.js b/node_modules/instantsearch.js/es/widgets/range-input/range-input.js
index d9009f4..0330989 100644
--- a/node_modules/instantsearch.js/es/widgets/range-input/range-input.js
+++ b/node_modules/instantsearch.js/es/widgets/range-input/range-input.js
@@ -19,10 +19,10 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import RangeInput from '../../components/RangeInput/RangeInput';
-import connectRange from '../../connectors/range/connectRange';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import RangeInput from '../../components/RangeInput/RangeInput.js';
+import connectRange from '../../connectors/range/connectRange.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'range-input'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.d.ts b/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.d.ts
index 6f06e11..05c5465 100644
--- a/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { RangeConnectorParams, RangeWidgetDescription } from '../../connectors/range/connectRange';
-import type { WidgetFactory } from '../../types';
+import type { RangeConnectorParams, RangeWidgetDescription } from '../../connectors/range/connectRange.js';
+import type { WidgetFactory } from '../../types/index.js';
 export declare type RangeSliderCssClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.js b/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.js
index 87db576..e193aba 100644
--- a/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.js
+++ b/node_modules/instantsearch.js/es/widgets/range-slider/range-slider.js
@@ -19,10 +19,10 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import Slider from '../../components/Slider/Slider';
-import connectRange from '../../connectors/range/connectRange';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import Slider from '../../components/Slider/Slider.js';
+import connectRange from '../../connectors/range/connectRange.js';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'range-slider'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/rating-menu/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/rating-menu/defaultTemplates.d.ts
index 6ade70f..a7fb069 100644
--- a/node_modules/instantsearch.js/es/widgets/rating-menu/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/rating-menu/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { RatingMenuComponentTemplates } from './rating-menu';
+import type { RatingMenuComponentTemplates } from './rating-menu.js';
 declare const defaultTemplates: RatingMenuComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.d.ts b/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.d.ts
index 180ad26..0b3c34c 100644
--- a/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { RatingMenuWidgetDescription, RatingMenuConnectorParams } from '../../connectors/rating-menu/connectRatingMenu';
-import type { ComponentCSSClasses, Template, WidgetFactory } from '../../types';
+import type { RatingMenuWidgetDescription, RatingMenuConnectorParams } from '../../connectors/rating-menu/connectRatingMenu.js';
+import type { ComponentCSSClasses, Template, WidgetFactory } from '../../types/index.js';
 export declare type RatingMenuTemplates = Partial<{
     /**
      * Item template, provided with `name`, `count`, `isRefined`, `url` data properties.
diff --git a/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.js b/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.js
index 9c2d6e4..5ec64c8 100644
--- a/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.js
+++ b/node_modules/instantsearch.js/es/widgets/rating-menu/rating-menu.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import RefinementList from '../../components/RefinementList/RefinementList';
-import connectRatingMenu from '../../connectors/rating-menu/connectRatingMenu';
-import defaultTemplates from './defaultTemplates';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import RefinementList from '../../components/RefinementList/RefinementList.js';
+import connectRatingMenu from '../../connectors/rating-menu/connectRatingMenu.js';
+import defaultTemplates from './defaultTemplates.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'rating-menu'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/refinement-list/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/refinement-list/defaultTemplates.d.ts
index 0436dd5..37301ac 100644
--- a/node_modules/instantsearch.js/es/widgets/refinement-list/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/refinement-list/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { RefinementListComponentTemplates } from './refinement-list';
+import type { RefinementListComponentTemplates } from './refinement-list.js';
 declare const defaultTemplates: RefinementListComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.d.ts b/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.d.ts
index dd9f637..3ea457f 100644
--- a/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
-import type { RefinementListConnectorParams, RefinementListWidgetDescription } from '../../connectors/refinement-list/connectRefinementList';
-import type { Template, WidgetFactory } from '../../types';
-import type { SearchBoxTemplates } from '../search-box/search-box';
+import type { RefinementListConnectorParams, RefinementListWidgetDescription } from '../../connectors/refinement-list/connectRefinementList.js';
+import type { Template, WidgetFactory } from '../../types/index.js';
+import type { SearchBoxTemplates } from '../search-box/search-box.js';
 export declare type RefinementListOwnCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.js b/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.js
index a1ea35c..dd32326 100644
--- a/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.js
+++ b/node_modules/instantsearch.js/es/widgets/refinement-list/refinement-list.js
@@ -7,12 +7,12 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import RefinementList from '../../components/RefinementList/RefinementList';
-import connectRefinementList from '../../connectors/refinement-list/connectRefinementList';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import searchBoxDefaultTemplates from '../search-box/defaultTemplates';
-import defaultTemplates from './defaultTemplates';
+import RefinementList from '../../components/RefinementList/RefinementList.js';
+import connectRefinementList from '../../connectors/refinement-list/connectRefinementList.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import searchBoxDefaultTemplates from '../search-box/defaultTemplates.js';
+import defaultTemplates from './defaultTemplates.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'refinement-list'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/relevant-sort/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/relevant-sort/defaultTemplates.d.ts
index c87c1c4..f285d7c 100644
--- a/node_modules/instantsearch.js/es/widgets/relevant-sort/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/relevant-sort/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { RelevantSortComponentTemplates } from '../../components/RelevantSort/RelevantSort';
+import type { RelevantSortComponentTemplates } from '../../components/RelevantSort/RelevantSort.js';
 declare const defaultTemplates: RelevantSortComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.d.ts b/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.d.ts
index 761499a..b66fb67 100644
--- a/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { WidgetFactory, Template } from '../../types';
-import type { RelevantSortConnectorParams, RelevantSortWidgetDescription } from '../../connectors/relevant-sort/connectRelevantSort';
+import type { WidgetFactory, Template } from '../../types/index.js';
+import type { RelevantSortConnectorParams, RelevantSortWidgetDescription } from '../../connectors/relevant-sort/connectRelevantSort.js';
 export declare type RelevantSortCSSClasses = Partial<{
     root: string;
     text: string;
diff --git a/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.js b/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.js
index 1ca26cc..e94d79a 100644
--- a/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.js
+++ b/node_modules/instantsearch.js/es/widgets/relevant-sort/relevant-sort.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import connectRelevantSort from '../../connectors/relevant-sort/connectRelevantSort';
-import RelevantSort from '../../components/RelevantSort/RelevantSort';
-import defaultTemplates from './defaultTemplates';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import connectRelevantSort from '../../connectors/relevant-sort/connectRelevantSort.js';
+import RelevantSort from '../../components/RelevantSort/RelevantSort.js';
+import defaultTemplates from './defaultTemplates.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'relevant-sort'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/search-box/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/search-box/defaultTemplates.d.ts
index 4c98a13..5fb80c6 100644
--- a/node_modules/instantsearch.js/es/widgets/search-box/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/search-box/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { SearchBoxComponentTemplates } from '../../components/SearchBox/SearchBox';
+import type { SearchBoxComponentTemplates } from '../../components/SearchBox/SearchBox.js';
 declare const defaultTemplate: SearchBoxComponentTemplates;
 export default defaultTemplate;
diff --git a/node_modules/instantsearch.js/es/widgets/search-box/search-box.d.ts b/node_modules/instantsearch.js/es/widgets/search-box/search-box.d.ts
index 74f26b2..ca7dcfb 100644
--- a/node_modules/instantsearch.js/es/widgets/search-box/search-box.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/search-box/search-box.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { WidgetFactory, Template } from '../../types';
-import type { SearchBoxConnectorParams, SearchBoxWidgetDescription } from '../../connectors/search-box/connectSearchBox';
+import type { WidgetFactory, Template } from '../../types/index.js';
+import type { SearchBoxConnectorParams, SearchBoxWidgetDescription } from '../../connectors/search-box/connectSearchBox.js';
 export declare type SearchBoxTemplates = Partial<{
     /**
      * Template used for displaying the submit button. Can accept a function or a Hogan string.
diff --git a/node_modules/instantsearch.js/es/widgets/search-box/search-box.js b/node_modules/instantsearch.js/es/widgets/search-box/search-box.js
index 29b5e89..4c09c5e 100644
--- a/node_modules/instantsearch.js/es/widgets/search-box/search-box.js
+++ b/node_modules/instantsearch.js/es/widgets/search-box/search-box.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import connectSearchBox from '../../connectors/search-box/connectSearchBox';
-import SearchBox from '../../components/SearchBox/SearchBox';
-import defaultTemplates from './defaultTemplates';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import connectSearchBox from '../../connectors/search-box/connectSearchBox.js';
+import SearchBox from '../../components/SearchBox/SearchBox.js';
+import defaultTemplates from './defaultTemplates.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'search-box'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.d.ts b/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.d.ts
index 8013dae..cb1d7d5 100644
--- a/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { SortByConnectorParams, SortByItem, SortByWidgetDescription } from '../../connectors/sort-by/connectSortBy';
-import type { TransformItems, WidgetFactory } from '../../types';
+import type { SortByConnectorParams, SortByItem, SortByWidgetDescription } from '../../connectors/sort-by/connectSortBy.js';
+import type { TransformItems, WidgetFactory } from '../../types/index.js';
 export declare type SortByWidgetCssClasses = Partial<{
     /**
      * CSS classes added to the outer `<div>`.
diff --git a/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.js b/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.js
index 6eabaec..4f4889f 100644
--- a/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.js
+++ b/node_modules/instantsearch.js/es/widgets/sort-by/sort-by.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import Selector from '../../components/Selector/Selector';
-import connectSortBy from '../../connectors/sort-by/connectSortBy';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import Selector from '../../components/Selector/Selector.js';
+import connectSortBy from '../../connectors/sort-by/connectSortBy.js';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'sort-by'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.d.ts
index 72d87ea..5774692 100644
--- a/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.d.ts
@@ -1 +1 @@
-export { defaultTemplates as default } from './stats';
+export { defaultTemplates as default } from './stats.js';
diff --git a/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.js b/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.js
index ce2ffaf..5774692 100644
--- a/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.js
+++ b/node_modules/instantsearch.js/es/widgets/stats/defaultTemplates.js
@@ -1 +1 @@
-export { defaultTemplates as default } from './stats';
\ No newline at end of file
+export { defaultTemplates as default } from './stats.js';
diff --git a/node_modules/instantsearch.js/es/widgets/stats/stats.d.ts b/node_modules/instantsearch.js/es/widgets/stats/stats.d.ts
index 001db8e..0c33d36 100644
--- a/node_modules/instantsearch.js/es/widgets/stats/stats.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/stats/stats.d.ts
@@ -1,7 +1,7 @@
 /** @jsx h */
-import type { StatsComponentTemplates } from '../../components/Stats/Stats';
-import type { StatsConnectorParams, StatsRenderState, StatsWidgetDescription } from '../../connectors/stats/connectStats';
-import type { Template, WidgetFactory } from '../../types';
+import type { StatsComponentTemplates } from '../../components/Stats/Stats.js';
+import type { StatsConnectorParams, StatsRenderState, StatsWidgetDescription } from '../../connectors/stats/connectStats.js';
+import type { Template, WidgetFactory } from '../../types/index.js';
 export declare type StatsCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/stats/stats.js b/node_modules/instantsearch.js/es/widgets/stats/stats.js
index 3c01509..351cfee 100644
--- a/node_modules/instantsearch.js/es/widgets/stats/stats.js
+++ b/node_modules/instantsearch.js/es/widgets/stats/stats.js
@@ -7,10 +7,10 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import Stats from '../../components/Stats/Stats';
-import connectStats from '../../connectors/stats/connectStats';
-import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import Stats from '../../components/Stats/Stats.js';
+import connectStats from '../../connectors/stats/connectStats.js';
+import { prepareTemplateProps, getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'stats'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/toggle-refinement/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/toggle-refinement/defaultTemplates.d.ts
index 8994f55..666f4fa 100644
--- a/node_modules/instantsearch.js/es/widgets/toggle-refinement/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/toggle-refinement/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { ToggleRefinementComponentTemplates } from '../../components/ToggleRefinement/ToggleRefinement';
+import type { ToggleRefinementComponentTemplates } from '../../components/ToggleRefinement/ToggleRefinement.js';
 declare const defaultTemplates: ToggleRefinementComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.d.ts b/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.d.ts
index 16aab13..545a01c 100644
--- a/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.d.ts
@@ -1,6 +1,6 @@
 /** @jsx h */
-import type { ToggleRefinementConnectorParams, ToggleRefinementWidgetDescription, ToggleRefinementValue } from '../../connectors/toggle-refinement/connectToggleRefinement';
-import type { Template, WidgetFactory } from '../../types';
+import type { ToggleRefinementConnectorParams, ToggleRefinementWidgetDescription, ToggleRefinementValue } from '../../connectors/toggle-refinement/connectToggleRefinement.js';
+import type { Template, WidgetFactory } from '../../types/index.js';
 export declare type ToggleRefinementCSSClasses = Partial<{
     /**
      * CSS class to add to the root element.
diff --git a/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.js b/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.js
index 765fd1b..685a899 100644
--- a/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.js
+++ b/node_modules/instantsearch.js/es/widgets/toggle-refinement/toggle-refinement.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import ToggleRefinement from '../../components/ToggleRefinement/ToggleRefinement';
-import connectToggleRefinement from '../../connectors/toggle-refinement/connectToggleRefinement';
-import defaultTemplates from './defaultTemplates';
-import { getContainerNode, prepareTemplateProps, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
+import ToggleRefinement from '../../components/ToggleRefinement/ToggleRefinement.js';
+import connectToggleRefinement from '../../connectors/toggle-refinement/connectToggleRefinement.js';
+import defaultTemplates from './defaultTemplates.js';
+import { getContainerNode, prepareTemplateProps, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'toggle-refinement'
 });
diff --git a/node_modules/instantsearch.js/es/widgets/voice-search/defaultTemplates.d.ts b/node_modules/instantsearch.js/es/widgets/voice-search/defaultTemplates.d.ts
index 49d5c1b..051df3d 100644
--- a/node_modules/instantsearch.js/es/widgets/voice-search/defaultTemplates.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/voice-search/defaultTemplates.d.ts
@@ -1,3 +1,3 @@
-import type { VoiceSearchComponentTemplates } from '../../components/VoiceSearch/VoiceSearch';
+import type { VoiceSearchComponentTemplates } from '../../components/VoiceSearch/VoiceSearch.js';
 declare const defaultTemplates: VoiceSearchComponentTemplates;
 export default defaultTemplates;
diff --git a/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.d.ts b/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.d.ts
index 2c3a101..2fee2f7 100644
--- a/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.d.ts
+++ b/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.d.ts
@@ -1,8 +1,8 @@
 /** @jsx h */
 import type { PlainSearchParameters } from 'algoliasearch-helper';
-import type { VoiceSearchConnectorParams, VoiceSearchWidgetDescription } from '../../connectors/voice-search/connectVoiceSearch';
-import type { WidgetFactory, Template } from '../../types';
-import type { CreateVoiceSearchHelper } from '../../lib/voiceSearchHelper/types';
+import type { VoiceSearchConnectorParams, VoiceSearchWidgetDescription } from '../../connectors/voice-search/connectVoiceSearch.js';
+import type { WidgetFactory, Template } from '../../types/index.js';
+import type { CreateVoiceSearchHelper } from '../../lib/voiceSearchHelper/types/index.js';
 export declare type VoiceSearchCSSClasses = Partial<{
     root: string | string[];
     button: string | string[];
diff --git a/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.js b/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.js
index 15da282..2497a85 100644
--- a/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.js
+++ b/node_modules/instantsearch.js/es/widgets/voice-search/voice-search.js
@@ -7,11 +7,11 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 /** @jsx h */
 import { h, render } from 'preact';
 import cx from 'classnames';
-import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils';
-import { component } from '../../lib/suit';
-import connectVoiceSearch from '../../connectors/voice-search/connectVoiceSearch';
-import VoiceSearchComponent from '../../components/VoiceSearch/VoiceSearch';
-import defaultTemplates from './defaultTemplates';
+import { getContainerNode, createDocumentationMessageGenerator } from '../../lib/utils/index.js';
+import { component } from '../../lib/suit.js';
+import connectVoiceSearch from '../../connectors/voice-search/connectVoiceSearch.js';
+import VoiceSearchComponent from '../../components/VoiceSearch/VoiceSearch.js';
+import defaultTemplates from './defaultTemplates.js';
 var withUsage = createDocumentationMessageGenerator({
   name: 'voice-search'
 });
